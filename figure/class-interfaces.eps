%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 609.250708 474.250708
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.3 (Build 16D32) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 61 48
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 61 48
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /g put
dup 34 /r put
dup 35 /a put
dup 36 /d put
dup 37 /i put
dup 38 /n put
dup 39 /parenleft put
dup 40 /space put
dup 41 /parenright put
dup 42 /e put
dup 43 /t put
dup 44 /G put
dup 45 /P put
dup 46 /A put
dup 47 /X put
dup 48 /L put
dup 49 /S put
dup 50 /u put
dup 51 /o put
dup 52 /fi put
dup 53 /l put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<






00>] def
/CharStrings 23 dict dup begin
/.notdef 0 def
/space 1 def
/parenleft 2 def
/parenright 3 def
/A 4 def
/G 5 def
/L 6 def
/P 7 def
/S 8 def
/X 9 def
/a 10 def
/d 11 def
/e 12 def
/g 13 def
/i 14 def
/l 15 def
/n 16 def
/o 17 def
/r 18 def
/t 19 def
/u 20 def
/fi 21 def
/uni2B91 22 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4243299 def
currentdict currentfile eexec



52A2617C4CF155AC72F3778B1A524F6B973C4062120B4E36158A45AE840A44B3874EDBB8445CBC59DC80A4BF1C4A0086ED7D62AD828E18545C7F3811FE1F68A803DADD90635D9F040A2DE7EDD9BE6FE32C6148765DC6E8BF8D5472A75000BC76CB7DA6C6FEC6D050A7F254F4E1B4E1DBEAABF01F99CB0BC3B30C89FB89DEAEEF0D3B378AFD3AD0E8BAB8A086D1ADC80B0C53B588F61060137AD1F99A2CCCFC95F7E60C64377F9DBF66A60AEACEF7FD33AA811BE12F8030BB3333CC82B9CB846C301E12EAAA5AE3B0A1CB07230611E71DA4BD9F01D55B7A14F44C85F288959A4B63F87A4EBFB8B7A104D72B9C7180F0A958644CEC2943B53618190F60A517DE5F470389DAD8A34E938C0AA693AEFCB485A1A8D17E9A25BDA0DB2819D0ADF7F7CB069A995001F82504F42914C88C008D4F2EF15578ED8C14AA52A1F2540BF5C231A81EE2CD9DB2E792A22BC5BF127B3A0198295CC45E99ABE092D0719BCE7CFB5489A80E83355924C4C4FA1168B856EDFE22B3AC204A8BAB2E0D6095B89D94AD9CDE280213EE5DB23147CCC9C8B638FD6712E90FA2C3B59DF3DE8EDACAE77740170991C68DCCCE16D3E9998C2CFA475383F83C4D4459CE3609B493F715B038FB1A0D8683B226C661201A02B515CDEE1CD4324F7850E14E5A17F49CE54732C7C9B95E3AEC64C2D0F9736EB53BEBE7AF836A3479D16BC26FEA64C05A35686CEBEE8F281F623BD14CC363F6094321FEF1767444E832857D46FE3913537BC738325C24FC3B5D7027160275229DBFA7A397A5FEC3C159093514D092454E406FE47E66462BE918C9AAB1BD4430C9766E008896D183FF1447EB53B2E14C3B08D0E5969701D539C2F369A715B7E6D0B8EB805096D8C110E58F4DB687A45E643C8B4F29AABF82D34FBE38D7899EDC901D1A30FF4217E741CD99198FEDEE5BF3A4064605E4E83CF28E5465A1610B3350ADC2C6656B50F8D7D1A6F395959D8CD87711D81EB16A665E5A188A12E04346868E76E0B4FBCFD1A6239981BEDD6A98FACB18B79E06C4B0A44D192B908D25A880C74CB6FD3D6379DD007629595C8D33EEFF982E38B1BFA3EBC663D9EDB44A1ED2424C9B53C8C2CA50426743F78095AB523DC3267AF32410B88B2A77B0B41683A259EC765006ED5A6349A3FC94ED2C0F5B999AAE830A485F791C2ABBE40B8317B2AF4C86C50576CDDFBC7725B74E503453BDC5111A95CDF24F253B92D23D8512B3E1506B2D64C2444BD66FB3EE814C89F9BD76114F88C29C2406F62D4B0EB121AF17F3A740A0516C604E90117CC3B8454B7F6051CE7D4BC5C91574E944A535893650E214B370540BF2A8EEB1EFA66146FC9B63781F0E5133193C6588D9C9549E76767E812DCABB1F16AE9C2183
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
%RBIBeginFontSubset: Thonburi
%!FontType1-1.0: Thonburi 1.0000.1.0000
14 dict begin/FontName /Thonburi def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /A put
dup 34 /B put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2560 -1531 1 index div -1463 2 index div 3957 3 index div 3585 5 -1 roll div]cvx def
/sfnts [<


00>] def
/CharStrings 4 dict dup begin
/.notdef 0 def
/A 1 def
/B 2 def
/luthai_saraaathai 3 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.000390625 0 0 0.000390625 0 0 ] def
/FontBBox{-1531 -1463 3957 3585}def
/UniqueID 4158355 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C94CF017316529A80F552C33559AB2C21302561FE61E935C1E32B3C98FBE3F2558FB9CED11AC82221527C92532B1F6E0E2E30B723F686171511C5BFC287C62C8121151A9FC6228D277D135DFDD0FD57828A8A5BAA267F55910EF39829DF635751BC11D4DF809D07ADE0849006BAB3C5AB865600FD9D21C17A90255646C7B70F9B44C467BE35FACFA87BAC1DB3706F465B4607AE1138119B7D6AB1ED1FCFE49F768E953AAE06566E81C75A4303A631987D890CBEB04660DA2C2188A74ABFD2C7CA56860F9A0707CBDF3CBE6EEDA5D5DA057AE2A4710F4927F738A17902BDB195F1E6CCA05546CEC77AA455D36EABC8FAB1613CC99A0F63EE9FE6A3B27A80D71CF8C6A05C1A6B1B75A22F469F6543B2C4451236C25AA54A95959C434986DA66FC9CE0C05BC5978F5DD871E384A772B089FD91DF4771294E0EE23446A4EE2D5A80AF4B7E6E21C8D06A4D27DCA5FB47ED1AF9042DAE0E9AD272160FEC1F16ADF9923175561C7F87E63C0CBCCBA306B0D1B78D02CEF84BC4464A1EA04F1BC6613D16F03F5CC154FF272037E7C9862022CF979E672FA77E9D8F24F0E68E2FAF50651E9D359276404DFB8BC0B30AAA1D56A3578B640AD8C89ADED56977BD7205206B80AC83593F37ECC3143CB6E677A7E773E6EF215AB795CB0140C26187AC2C2B28D81227C8C68D688C1052A5CCF4036F72E1744472B92659C5EFAB809D512225FE43584B24F94F1655CB257B04653A3DE18C4650451D962623FE02415FC6FBC977FE5CD5
042BD4915BEC19D3E7D13F7C6CFAC4C004C422F320BA54C1ED6925C9B0238824EF4BD3425CAE20A68DEB1C8217DF43151F00D03EDE1B6D976B323820194AE236E13E508429141C2F227F87ADD0F604BA8764AC3AA1F3B7116EFA2AAE517FAFB7F8DC23E36E37A7F7634D5694C892003A1D3971E1DD4FB280BB26EA24B3155D48C54F34EFF4EBFB5E26AE544CC554950030B5139CC0F1CB81198D381780D5510E9060CBCA3E3D5473951EFDE804B1496AD8B7A20BDBB8A62423A914291AAF9EE6875F35357DFC562585502FE1C50C7637F980003E88AA98EFB1C6EB19509E958B337EF4F4D143B36345C98A67973425E0444461A89BC4DB0AD458B1E2B051A34A4E4E3000981494304BD31406C8CBC460A0DA9E7838218DE077FF3300AE4E6DEC03839BF485D6F0EFA695AD30975B857B62BCDB71A1C7928037A10196436ACA9C72CA225F9A13962A46F385C48CC0F21C4A5D195C880E0C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/Thonburi cguidfix
/F2.1/Thonburi renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 60.925072 47.425072 rc
1.2125354 46.212536 m
27.312536 46.212536 l
27.312536 1.2125354 l
1.2125354 1.2125354 l
h
1.2125354 46.212536 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
0.1 0 0 -0.1 -167.08746 143.41254 cm
1683 972 m
1944 972 l
1944 1422 l
1683 1422 l
h
1683 972 m
S
0 i
1 1 1 sc
CM
3.9125354 28.662537 m
24.612535 28.662537 l
24.612535 18.762535 l
3.9125354 18.762535 l
h
3.9125354 28.662537 m
f
0.60000002 i
0 0 0 sc
0.1 0 0 -0.1 -167.08746 143.41254 cm
1710 1147.5 m
1917 1147.5 l
1917 1246.5 l
1710 1246.5 l
h
1710 1147.5 m
S
/Cs2 SC
0 sc
0 i
0.1 0 0 -0.1 14.262536 23.712536 cm
/F1.1[ 20 0 0 -20 0 0]sf
-41.849998 7.2200012 m
(!"#$%&!'\(\))[ 11.480000 6.660000 10.740000 11.860000 4.440000 11.120000 11.480000 5.180000 5.560000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
33.612537 46.212536 m
59.712536 46.212536 l
59.712536 1.2125354 l
33.612537 1.2125354 l
h
33.612537 46.212536 m
f
0.60000002 i
0 0 0 sc
0.1 0 0 -0.1 -167.08746 143.41254 cm
2007 972 m
2268 972 l
2268 1422 l
2007 1422 l
h
2007 972 m
S
0 i
1 1 1 sc
CM
36.312534 40.812534 m
57.012535 40.812534 l
57.012535 30.912537 l
36.312534 30.912537 l
h
36.312534 40.812534 m
f
0.60000002 i
0 0 0 sc
0.1 0 0 -0.1 -167.08746 143.41254 cm
2034 1026 m
2241 1026 l
2241 1125 l
2034 1125 l
h
2034 1026 m
S
/Cs2 SC
0 sc
0 i
0.1 0 0 -0.1 46.662537 35.862537 cm
-48.139999 7.2200012 m
(!*+,-./'\(\))[ 11.480000 10.740000 6.300000 15.180000 11.480000 12.960000 12.220000 5.180000 5.560000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
36.312534 27.312536 m
57.012535 27.312536 l
57.012535 17.412535 l
36.312534 17.412535 l
h
36.312534 27.312536 m
f
0.60000002 i
0 0 0 sc
0.1 0 0 -0.1 -167.08746 143.41254 cm
2034 1161 m
2241 1161 l
2241 1260 l
2034 1260 l
h
2034 1161 m
S
/Cs2 SC
0 sc
0 i
0.1 0 0 -0.1 46.662537 22.362535 cm
-75.739998 7.2200012 m
(!*+,"#$*0*++*"'\(\))[ 11.480000 10.740000 6.300000 15.180000 6.660000 10.740000 11.860000 10.740000 11.120000 10.740000 6.300000 6.300000 10.740000 6.660000 5.180000 5.560000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
36.312534 13.812535 m
57.012535 13.812535 l
57.012535 3.9125354 l
36.312534 3.9125354 l
h
36.312534 13.812535 m
f
0.60000002 i
0 0 0 sc
0.1 0 0 -0.1 -167.08746 143.41254 cm
2034 1296 m
2241 1296 l
2241 1395 l
2034 1395 l
h
2034 1296 m
S
/Cs2 SC
0 sc
0 i
0.1 0 0 -0.1 46.662537 8.8625355 cm
-85.559998 7.2200012 m
(!*+1+2$*&+-"345*'\(\))[ 11.480000 10.740000 6.300000 12.960000 6.300000 11.120000 11.860000 10.740000 11.120000 6.300000 12.960000 6.300000 11.480000 10.360000 4.440000 10.740000 5.180000 5.560000 0.000000 ] xS
3 w
0.60000002 i
/Cs1 SC
0 0 0 sc
0.1 0 0 -0.1 -167.08746 143.41254 cm
1870.5828 1147.5 m
1934.3665 1096.0894 1977.3463 1076.833 2018.1758 1071.1799 c
S
0 i
CM
35.844788 36.404007 m
34.689102 36.71254 l
34.771194 35.87656 l
h
35.844788 36.404007 m
f
0 J
0 j
0.1 0 0 -0.1 -167.08746 143.41254 cm
2029.3225 1070.0853 m
2017.7656 1067 l
2018.5865 1075.3597 l
h
2029.3225 1070.0853 m
S
1 J
1 j
0.60000002 i
1917 1205.7628 m
1948.6888 1214.1074 1973.0875 1224.9404 2018.1027 1225.4918 c
S
0 i
CM
35.842579 20.878704 m
34.716927 21.28331 l
34.728443 20.44339 l
h
35.842579 20.878704 m
f
0 J
0 j
0.1 0 0 -0.1 -167.08746 143.41254 cm
2029.3004 1225.3383 m
2018.0439 1221.2922 l
2018.1591 1229.6914 l
h
2029.3004 1225.3383 m
S
1 J
1 j
0.60000002 i
1855.7968 1246.5 m
1926.1143 1325.1526 1965.1497 1346.5857 2018.1053 1350.0768 c
S
0 i
CM
35.842812 8.3664227 m
34.737881 8.8245993 l
34.709064 7.9850941 l
h
35.842812 8.3664227 m
f
0 J
0 j
0.1 0 0 -0.1 -167.08746 143.41254 cm
2029.3027 1350.4612 m
2018.2534 1345.8794 l
2017.9653 1354.2744 l
h
2029.3027 1350.4612 m
S
/Cs2 SC
0 sc
0.1 0 0 -0.1 3.7125354 42.712536 cm
/F2.1[ 30 0 0 -30 0 0]sf
-10.904297 11.497955 m
(!)s
0.1 0 0 -0.1 36.112537 42.712536 cm
-9.5449219 11.497955 m
(")s
ep
end
%%Trailer
%%EOF
