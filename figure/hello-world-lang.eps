%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 843.250708 447.250708
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.3 (Build 16D32) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 85 45
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 85 45
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: Inconsolata
%!FontType1-1.0: Inconsolata 001.010%%CreationDate: 2/15/17% Copyright 2017 Apple Inc. and its licensors, all rights reserved.11 dict begin/FontInfo 9 dict dup begin/version (001.010) readonly def/FullName (Inconsolata) readonly def/FamilyName (Inconsolata) readonly def/Weight (SnapShot) readonly def/isFixedPitch false def/UnderlinePosition -125 def/UnderlineThickness 50 defend readonly def/FontName /Inconsolata def/PaintType 0 def/FontType 1 def/FontMatrix [0.0010 0 0 0.0010 0 0] readonly def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 33 /slash putdup 34 /space putdup 35 /J putdup 36 /a putdup 37 /v putdup 38 /c putdup 39 /l putdup 40 /s putdup 41 /H putdup 42 /e putdup 43 /o putdup 44 /W putdup 45 /r putdup 46 /d putdup 47 /braceleft putdup 48 /t putdup 49 /i putdup 50 /p putdup 51 /u putdup 52 /b putdup 53 /m putdup 54 /n putdup 55 /parenleft putdup 56 /S putdup 57 /g putdup 58 /bracketleft putdup 59 /bracketright putdup 60 /parenright putdup 61 /y putdup 62 /period putdup 63 /quotedblleft putdup 64 /exclam putdup 65 /quotedblright putdup 66 /semicolon putdup 67 /braceright putdup 68 /P putdup 69 /less putdup 70 /percent putdup 71 /at putdup 72 /equal putdup 73 /j putdup 74 /greater putdup 75 /h putdup 76 /question putdup 77 /C putdup 78 /numbersign putdup 79 /M putdup 80 /L putdup 81 /w putdup 82 /f putdup 83 /O putdup 84 /hyphen putdup 85 /F putdup 86 /comma putdup 87 /asterisk putdup 88 /N putdup 89 /zero putdup 90 /R putdup 91 /x putdup 92 /A putreadonly def/FontBBox {-1 -177 510 835} readonly defcurrentdict endcurrentfile eexecD9D66F633B846A989B9974B0179FC6CC4458BB4CB99E3608702C78822367AAF89059868F63F93207640A6BD5DA214789139C491E02A37BF3866F2964E8D690D48D9F6C4A5EC22355F8123573812483E06B968AE84B5F20A982A0E6576475351697AB8C6EA040355C5542F297D7A3AF28AB93EA0771E0D56DBF00F7CA9CE9FB9FC2E0ECB00D04D5F5F3F24B987B546D6274971A477DEE12C44623C180BCDBA21172627610C4736632D1A4693E79719C3BC43DF5330790A52DCD4CF455ACC213F6B1C4BA249179DB360225568161552A16682E3A3604BFC39D571B1F8F18375BECF1D53D6B9105969026449EB2781820339C2C5D7F4444F9CB3D324A038EB31B20ED0726DA93C9D0BB2DA2DB6016332BBAE24B03CE537736D080D6D2C9829261C6ABBD4E80EA0977A3C6BC97BE8727C29983C51FE219D86995F15BDF423C816C1D78B722415C9C98CEBB5E7AEFD6E4F63E78AE110078D51E6563D8440D5BA69BB6CB3B02F2B3CAB3838CF3D75D05F8D238956271955D6C818CDED4D9F1A502166365E53D06D2E136193F9A6DE6BBDB7276760F37F4CED49C6BD6766DC076238F168828FAC0C9D6A26411BCA38EBD22BF2FD6F35BE4E0C215EF1AB91B70A02D840BED2F82F4FE3E8BAFAA8337477F9993DC96C373C834E84851F25EF9421EF67F89BF14806EFFBB1974D4AC46A772424FB84CD96BF6C22978B149A7E4FDD19530C2C69030F12AB2DEDAADD75FBFA22306670AF7D0AFE101AA9E105AC3A24546C86F5CCC157D03B8D355157D2E5A65BA56352635027727B7CC3190D8007E605C1DC7EF1BF45919808E8494AC4FE27F9222C1946FAB133F027800387BB59929CA1E7F07C713E0ED81037782757C4C30280052FC14F017B4FADDB4EE00CBDA5B19846D4507CBEDAD853B147796165376DB9A45D941673597E46A47BFAE1157FDD92B167DB8422CF81F5B4C80EE86C9B4C4CFA4BB1DEA5A877CCC6254511BED975701FD44981108C5E85464C559E3F31B1CADA606697CAF577A664FA0309F22631168791B62DE46A1F4D9656513D43B7F8333EE4182B6324F48FDD7AE484CB8DFED7239397FDCC274799D64CE578AEB7944DDFE92DCFDA12B224B6F8949DE5756965055CA04733F158CCD65D3B039CDD3A0BE703CD0ADBD32780919FB8F14E1EC086DCB5AC522BF2A5890F3211EC55F6E98680ED2CA598C8BCFEB6589CB2F0B6DC103253BAB47C2290575EA7C9335B6EAD11533612D7F792D6472CA76886046B5F9D803C99BB0F43ABF87C20D72083ED51C7E37134E57A21D6E722BB804115EF64928D9CF4AD85B58C2F15AA5ADF43EBF4ABF6568AE3B90D14F4C56B9E1366320AED06E0968E4BAFD71725BFF2763DD892C2D04FB3945500787285160B3DDB539B6FD7C79C5CE4BAC264EFB27EB8F291DBBED98FF7CFB94B19EC40789DEAC2BF3A46F844185340D8C4175E5F4E94040517A982DFD6835829C22D004E67FE6F553316A7BCE2B4E832626F9C888918F90AA6F4B7185785F39FB73EAE2EA21AF0398A1B9697B39EB3CEC2CB5A79494277A594499EBF7926535CD02AFF7BA5E9A74BBF2BCA30F09EE6E81EA7D294E3D57F5522946117858F8A8FF1E6028FD7C1E11E88E384AF45FA1D76869ADAC6DF2745B2693FA489AEFEBE20FD84CD85474F91E5A27F37071D721D78C563BF831060C5467AC1DCB4F2630A55047F104B93B43D09D10C417AF88CD4262F41E5F4DB1965284660E2AB845BC1575817DCE5BDA73852F6C15A1AF380EC6A328FDD261EE936BEF552C497DB25BCC39EEDB21380320967E5815CA46F787BF9AA8D19760E691FE1EF13E505D1B47DFCAD2284ED0C412DCFC3963781410DA3B2DEE505206CFE9A5765E292AB383B6C33505D09B967DBB5851D1C0529B771A52D13EEDC65FD145EEED5E268722BD7CFB06E3504DF1B39A146F3E24DBBAAF1710CF93CAC6DA15240ED4480FD6A8D929EE75C374D08046DEE4B79A5AB10FFFF18FE23F2CD70DDE28FEEB8C9D31A7742D114747308F7F8AC05705F3D008AA816DB93ADAB40FA1B233B42550634A3A2A34848CC7B7EE2B0585AC4E8107DDB362F396D6D7630B5CC55B087DF4A535656D46DEB2E715C9ED22A41A329EDE60580C060FA680F50F07A4894352331E57C18F945420B456DD4E592E6207BDFB5EE52657D4D41F8A06112ABE246F44924A5CAB868BC91A18393BAA6BE6298A86D821E16619760C8BDEFDE0746BC6C08E970096810701DA7EBC06C8E160663D669920E4DDE1D59E0B6388B5F5334BBE9DD441505B9E77B85CB7AC4B967D3BBAC3576D2C13242044D954E7D617232F8B1173F2AD5FB26C8040ABA4438F0AC6F83A0FC5F8F18925E8BCB35CB10760A560E22011153408F1E949FB201907B77FFD175A868F0285A6F90B0F6DDF88CD1EAC4D42A0D2C7462F97EE9AD2156E1F443E8640BC40657EE4F5D058DB33CE31710C62BFDB825CC558A73DDC8232653D9B9367B4A9126339EFDB2840296E7DEC1EF6779D035899C40AF46AF40AEF7DCC008DF33D4458D0B23241BB9337746E0AFD6FD302AEA1BBB6F69B3C01D777A61A9066F5A9F9EA5E0691C9997C9DB935FD7E3C26BE41A6D8A9737767C9AB7828172EB87CD9543A2629AC082356F907CA6708A8F311E2A190B7D0A264022CD479B4444384CA28EC9D081969A2514B6F4264DE45D0B4B2337ABD745C045B6C57E06D3DD64A23E17DF242171BFDF7EEC7FEE330987C7B638CA8F2B52AEC24469278764F079A03911E3C20E179119A8C329C8BF2C6EC869F9AAC7421AF89477B3492E50F42DD646E5F343200B7C41B28807BC635BF3958C156D9054100D978304AEF96F42C3BE36D822EBDE6B373661C00E964AB871A938CDE6FF729E71487FD13911CE9BD5800FA180F7B1AB2FE5D450BE420CE7D2A6E9684C02904FD6F77FB7D04EBB2A7FB4F88A04E70044F964D0225CABCF787FF0A07282F37A08204B8E0F1160F49F580ED360C8FC23824494ED47B48D6A7CD8275BCC045BA1DA5619A3EE009796AF0C7C1E9135008FD1D31813F0E9FE1ADA9728F31D5AE61A26916BE3DCA261D6564548DBFA17C4F314E89D39E19A4CF2FA962993C51CACB7F8F9C3FEA6440336586FE920D28CDDBD9D8E8BE260690D61863858B429A99CDE0C677EB1D82886C9C14E61C29B0C3F02B5F95406790451075AF42479A8B52F856D6D9DA9FAE272FEE8312B026129778472C50EC9C08504AF6D64302E4FB670D2A7ADB92CA9BFE6EA6AA13F537CB92A3E20951EEB9458E2332F1AF63E39D80693A06131936E41A9DED15CBC3C286C5F4C00556DD88420DE7EF06B62C069D22408A09DE4AAF75E03F09E5B9E0D1F0C43C005BC8259125B00CA7B611B4CF75178B1D6B48B154CD1D53D5F7B5997DB65D350A329537121E4E70365B6604D21F89706943E6E57A213B74CAB7899C8E8919998EAF5D76E3B3F4B62862B3F724D13C33D418316961D878CD36FCF4CBC94548B09ED3BAC068D5B43E1354F74F5A08F88E3103FBCFA8D0EBE6FE99648F48B089FEA2B6C514CC43C9ED42BA61C74235971D712DEA6FF25B0F80E4A7FB4AF7602F986371831DEEC9952332C01B0D1F926969AAB3275B19DAD3D6D775C0598A8571887F3F59032CB83AB2DE907BBBC9926E08BFEFD826D1B443B257D7AF80B0615C2B2BD4F060076CCAFE1CE58992EEBA6EF36252DC8C7A2142327241C1574A5BC5C38827D74C3327DFCB66254A4E490FCEE71A1D06E716A0D84B5E3B90F41ED83F7540BA1AA31DC1B9CEB5E332691F4BE5D94A94A8999D1FDCC79555616FAAAF93B782C4E3F64D20E19048BA1C0023B96CE02460F36C460A6ECD5F01CD9F54F3DDFD982511DEE59F977CAA07029FA21B5B3BBE939618440C6EC5DB8F73DBA7A5438643E1DD740E4BEE883485CCAF5AD20DC265806C562CCAB48108586EEF3725C692645B92712E76821F08B99E95F6F6FBFF94EA24BF6E2A4240AF868AB59A5F5D1F2106318B908A735188CD962CCD7DDAC2EF3FA03346AD43C744D2285C297B867ED07463F3988BD0C0C61095F85F4A8DE15D120372BD3B4BF49A1229A9834A235E6F4A94B64C4EBEB7932A32C3D3DFF1864FC441529D5D9CEE0D00609105D2BBFB95E009C8683AED0829A7CE90A0F9259558B76AD05FEBE61A5A184B5A0C735AC8480ABD21B2DC89A9A60BEDF3F3D2C28C4698E0E22BE14B187903749B9EE40DBFB368AAA6F31AF04654BCF369B90204B3011AF44B1D004D5B6B64186CD7D815DC5163E1B7E011C4C8EB04B55B6E1F4C344D6208162830D095731ADBD742AFE9C7733F18F182FBAF1139B89B5E123FD3C0C96CFE4C23EC11F821A695AABACA161C954F7B4D6A241D2DF3655CF1F237217AB710F16A81A5291C729BCCE6667BFC46906243075D3D1D2A9450BA2ADC34AB97D1F243530A08ECDD844BA6FA9A31627A1B603EB8913AAC1B34289664E041BED3FB78E9F0E39842E05CEA6ECB462A9F06F1F38EAABD92BA80687295BC8E8E82BB32E4A3A8C5EED443DBFABD213EE00730BEED473EFCF282B83B7B3AA1034A701A8F190B18EE7F4B16466CB2DC483ACFAAE88F2DFF9FAD4AF423E9025234A4002E41B4F602C07D9DEFAEA14F7FCA06F3FC3BD7A18C4FC2E19A1985EC2EC7BB677D5B0D1EC6D4E705D92A2DBD086F8CB368166CB66583C6B08EF5BFDE8AE70F6435518BA5C1F671454BA4773E244180009A1FDCDAFB4391BFCF17B4A3599AEB4238AC5D97D18D3C1BF279F5463A38FD9B50A113FB12D82512EC461E1F3CD6B36932688B246239FCE08F9B9B743DC51336D27BE06A6EEB4518CB36421F552E5881129C19E0B0A0F4F0855DD3085D13FD635C9DCB2338AC2113D54FE6685EA09F62864E86538B0F738960DD19EC8F27E97093B74F5C6D7C9A1EC20D13641177808969ADF9F6118FF0597377BA40D9254F636B835339C1B4C49903353C33F6F1046B1B31A5501C9268042F6C07AD596FA0719082658DB5797CF0DD865F16BC22BEB34FBB892E58BA351425EF0506999477E799E1FF092C35E8D85D376C6ED9ED5B3B1D029A95B3AD4D1DC3CC9C10BAA39ACC29A45C54A40837E93DE038D39215973D6CB0222E8DB3051514B00B754DAA1516160D356F8C6FE14B75CEE6EE86880FE7890EE4E50296485A3691CD48FD152D0C886259DFD3D9AE25A081A02C3D1005A75EE7F62E80FC9D23C986B790126A8D48E393527DEBF670D530513F22B0A116B13EE0C4A790D1284761084041E0EEDCBDDB5D1916FB830733AE7D3DA14BDCE6C5A1A8E34FEA57963621E08234A0A865B54F8512E911ED632F27AFF55A65E109C8683AED0829B803B2D7CF0FF8AA1EB37A4C091A86D51EC9DB83592EE98CDB9B2299ED750360F682B57901352C4C064343376A8FA37A5640C6BFDA498BB4590BA7CA5558FD8CD47A269C4DD6A9FBFBEBE8CA425C047B2D2AC76102D10FB06E75A2A8302083A3B36580DE35BC4076EB87E3BFF90DF045CD317EF1C29C1D950DE1E78ABCDEB7564304B2DF8EC0AE280C99B7E0CE73D33803FC9CF167426C6FE9A083194E984E677425DE0448815B56B222E0512A0FEAD20BE4E414D56A4E34EFDEFCB144314219487D8A40681D330610C69AD1E776B2F49CA78170D3D48EFD3BED6240792E1A6B0E9BD58FD3F39FBC2A664F03DB42FD1F42C095C4DCF2C21BBE09331DE5A687E9BF2BEC855D2935EB9502DDAD48C6E25D164687B1FC7AEEA310DC78223D2F0C4BF9C9C738EC066AE32DA2152A05DAD35E0AEEE4D5A9DCD1EEF467104CEB263BB618A0CE2227DA29C3D97999D2674CEEAF701C2050CFF7C6C7B4F001E8C753B90CE3235F395D2749B9ED8D0B133CC189AC13FCA940B5AD4779BDAC0FEAEB756FA073ECDB470F763C4BC98B27FA680A976EA932B7DBB6B39CD28DC0742D7E9BCEF3A6526C22D237634A7268B6005608719B91D9003A41D7A481BEE98EE0CB318CF7F071397020AA65A6D9715EFAB5977057D4F56F86766FDC3516D5C7C186093C6BF7BF7CFA1950A3DE2BA76A747070A2E935FC8199B0F9F0611CAC59F50F3AB67BAA6A3FB16AA8B0E6841C6B1EF203EF2F4AC355C5AB551B46D98658892A06208786AD59C386A460412EEBB9D1999F4928D338B775258FF0DEE95CE36531C775D982DB0547FA622558262123D368AA70D2DD65CD5368C6339FC5B5F7C3BA32B38C0023ECE3CE5A2D74FA13D294F81CB8EDB81D107B2434ACD50A5B9930A296697D31BE6D0EC2D00CB683BAAFC823E00B3C21E4C7EDC8119C1D7AC38032AEE766D16F34D07C52230F0103C5C50C9283BA54A2CA80A3C38BE74223FAA581D7D6206AC260AA4500026248A2DA8718C0B7D54D29924B7E66EAB4EB7C13FECBC8EFB5EDE57474BE76B78C14CC8A09218AAD35F0D4F54BE54340971903AEE225A513BCB166F13781AA9F40C044E1F98F1B8C44AA3EA58FDE60854652601F66DCE3DB8BC7A406484A9F93AA3218C9DB04C2B314B0371B9013097F57EF6D8B61F2BAF21D05272E429922A6B1F35EBE4D23985C89E8EB08A48BBA6B0C9E3D056D8AE28C5BBD062E504D6256833C98BD61A195DFFDA0F73C7E9F7334AEB7C3523B1A364F0FD1937E7DC6ECEEBF51BC239DCF834EAF98A32830CF2120635B409197432D70FAC6F9B6BB545352CF4FE373260AA09829841B1B341C84146DBA2466BC193500ABCA0406CEF1DC9DEAB8007B3A8356765BED95707E8D5710B3CFC0227DF453E967FE8ACDD4D939B1F1617A82CE797739C4B22C593311089794B6F5103DD4CEFA70CAD3A2F9B5C5641B2E3F25DA04FB39E0758265BAB7FA657B74775E43B7CD60DF398C8624515FDF06E4AEE7B87ED837E293F802B5FB76852CD040D0A6D8E9954F849A24B170590276E7B5B7214DE6DA9D2078910747C52036E93B7BB111651E2EED59E319EC54D44CC0CF6A14760953DF4AD0E1F33A54D240E236AB63B376F7EA7C8EF13F2E2217B784D2814520FC0F971772FD25E6B31D9CAEE3B242EDB92F2C0D1B10253D2CD2404B43A14C56D7DCE07DC72442BD52BBB779E6EF6ADB9000976A43A5142A594EE971DFED27FA4DD0CDA01D17892B6535C5EEDC6659AF4259F93F35578751420BE040AD837AC6F053C69F6C60D3DB6A94683EED7918AECE0EC9A6199C494F9A88615B4BC36D96F815960609E723A6EE4ED849AEDBFF3255B40D517FF38274F9503349D2EE6A82C3EFBEC71241146892398BD03C2DA5FED3D183EE39D986D5018591E1A2885C5E4231E8A3E64F7E1A29B1E4D6EBC4D717C8927C92789BD12C1D9671762E4089AD086B3F588AB0472C405BB97E184074BEB258F8F75481A87B611849A973440B243185A7B757DD48924999EDCED34D0C4089DAB9A9797A16EDFB7AFE09E17E2297ECA2C92CAE7E7BE55B85CD0E4BAAFE313086AFCC18D0CE8B20E8742105C3F5D185898826764D4F5490AF0C9710B6C49EF54A15CF6F73AD7E2E10C4D968B943E8215D5E4AC35B18B196ACAB89F4933339ABBE55AD98853306C646C57C838222AD4359AC7EE707898FBC052578E1997D310DC4B292C98E35C557F7D0ECB794D8D9AF0ABFE8259E9D80346C7AB695878B61C5DD5309A634D4B4CBBA8B75FF530AD015BE7C524AF41A889691BC2A68C0C0CB34CCFF70A7A745F72F026C5EBE472454E9629B64BED7524201E84EF4136D1736DF920F5E560306C800C56CFFEC744F814E1E606258B8C9934AF1BBE5A7699DE152863BE7684397667805461A160C3A16200F71502BCC483EB20DE8538EBED6E469CC5E987B77B87D71E9F1FF64C7C45D129762EB0F4A2C2F102C70BEACD1CAC65AE2ABC6DC53F22DCC60A71BF75FAD5F8756CF47F93995BE5837DADC6B96C78EE138EB20FB507FD7826F885DC58EE4E585A7283A4D5245F8ED03F1EF81DFFD8A3B9EECCC15DB47426C01F2DA10E1EA85705179AF91FF87415CF0210E25019525E8FC837205863F6A4200E8C3270C83984CD6B1819389B4DE41E56C76BBCB40645E9C66D9FF757E3E6277FCF5E89A18CDF4D9A0D647AFBC1B5C58B463258D76A946820FA74A1DB3A2DDD0CB7A19FDB0AF066F3C7DF54E575BE71CCCCEC8A5CA3E521FCEFDD52BFA7BD2F6079FF23493D054459E838277A2C57572ED55BFC8F42A06CAEB7CF8233D43F0460986228006EF979B0565E070638068ECA8315278B0B4D1132623B5BD4ECBE94EB3430422F25DAAE117A3CE6882B400D58CFC32379D20AE49744786F838221CC3DE5341C78168A790E8A8404E024538F78E60B2CA05E01089F7767BD6220A1C15988847BCB5B01B04F5C3A740283ABD9C2B27049AA02B6836AC76C02EAEF80D5D6DB9B24997DFF77ED0BC68E77BBDEA0EF3F8576692FE1DD8CD3FD932FB9A6D232F03EC35A0E92E2A55E57D34ABC8D12B2C4ABAA633265B88164A45673D2246EBC69353B003E7CEADDF69A8681C114FC403A65CEF68C777FBCB70707F4F8F977DA0C4C02280AA43C74496D4D1E91599FB6DEF4366C1C08E0B89137713EB541748A7760AFCD2A6FAAD4791A9687E4F9AE461C8110BD9707448673C31EE794D44AE11D40E0AC934CE8CE945269914D2F96F002E4B198656A4D25E20643D4ADED411EFFB9160C419401C30E8F54B1941A3DA62D74430EBEB7AC159E4279DACC37FEEC2C6F285F9BD614A00DEE8F4170D1EA44DADABD5B989717AA793685F213136BAB78E0FA2D26219CB22D0A217C85A86E788C6B7CED2324A1400BF2BF278F9F124D22D12AE97AF428DBE40AFF5E69256A9B2CC3AAE6F8A21BEABDCB63964D0AC6AECCEA6EB14BEC8AB2F049B1BDC06DE0EC111B052C329B74869ACF3BF0BB5B18B1873D5BE84344E75BC740B78CEDC7937F4EF5DCF40C63D2919166684301AEBA47EC30B5203B9CC233FA414E50E2832B22F0B8F8508CAF36B324CF097960EE24C375252711C95A4A4EDA0D596FAA8D85AE1A0E4672326345178E6A00D88C4B2D6F96951EB613916189E381DB1D31DA40AF690D8BBA680EF9A9FFE73E5F86B52E3A70E45B6D269104E7FE76C911B3D24A337E7882868E2B8E83235D00AC3D220CFEA2256A810A645DE9D4E385942BF82AF3EBDD778F947080E5E58F972C08DEE92D545EDBE5F827F39AE78AC26ED1DC1C5FB10FCF644FFF923799C45AB11DB0F6FF6104F08BE9A8EA4724E0DEB1F1DC1AA02632EAC18A47D04E99B9A40791641E2F80EF8BA2BBACECCE940AD7D3C2FB3BB3A4EA8DE8EB346E75EBBD7F8E76DE89FF1451F0E03524C02B13FA15B9F93645D3712B26F66D306E171A7CDB4BCF1DA33DBAD9E3E2805BBE7C9FE7C33D924CC72B5631A2F6AFBD91DBA5EED101187BBF9960E564A99A48DC458EF961C47258D8239FABF82989BB0EF798AB7DBB10B83ABAFBBB6F633BD8B1A770433720870DCEBF499B33A2ABC731123F752013A849292DC12870047C4F62F3E4C04436A5834DCE4A5581DF45D8B634ED498A0F977D29ECDB2EBC843119097894DA17BF063F8AEF0D37932FB6CEA749794199BD37BE7D52C37D2C20D86A704745595D9022E0E1CD77BB913929BDC0E67E39082C7BB8DC85A5E09E4140FD9C6E90A74CA44D80BD996576693D50DA5960AABD8661A8E9DA927BBD89802C6F8F6083271630BF33E79C8EFB184F8A92781EAA22B715384B53FF7BE91619A944094AFBC4C7C4011C48035D500DDA8A674EEAFCD8F267DB577DB6AFF0138911B5115C55F586A48EA704780AB8220B06A0D69601782B9E0856AC187EA5EFED78AE15D2AF3813B60DFEFF14230B2FC525A1EBB6A480A5FF3116B75EC4822694377AA4555A2476E99A7B84DB4F2A6A5249019F7F6E6AEF15BAEB4B3A0D669FA1F9883FFD6A1A951D09F5C39A7623B6A16C6152BBECC18A9521C571A81FF37859B344B246204392FCF4E1D7439B12C04B22EFC21A3F020ED77A2BDF557CE8FB489DBC57875F8153F12248B52FCDE59C036F5ED98E3F4E5ED7CB1856EC6AA5E5F69931373BD22BD99601EFDDA6814D11F1B5F83D036A9F8DDF1CBD975FB4FEE39E4C4ADB20D3F5445062547EC0FA53881C3E2B8DF3F8E50D74944C097F668882D93FE50B5C7B18D4B6DA7E01B51EFF9B8F77449BB12D99F57CC00A88E5F52D628735E09CC8A856246D0B1374118D26FFBEA9F29CDA94557B53E73B6C43A51C4843802081616E9D193CDAAA831A3F48C1606F3BB760F5C919BC2D0ECCB2EC561A82832B7F755BA5D771F6098BEF7D5279B33F73B4F903EE544DA3931550BEB50D353403D5E3BCF430B6270CE804DE84FDE8F9CEF85260650BE993BE00F7A44DA87A809CDABEE10C4A3CB3B2A166BFC8D8A92C7D46EB12B2AEF90B9CFC31FF9726D91EC06897350BF00C4B82FDC4AF677429ABE0040E8E56312F7596E342C9A57EF467668ADC8A2F558C75DAC13F82BEC477A0E1ABEF14CA9339DFC6FA40DCEC25CDAFCB35AA92D1BD4A1B9BFA3DA41BA68B9C3B97272B28311C4C7736356D54F8F4D5983D415EEEE370DA4AAFEB35D1F756B7DE58902C2212127FE34EC3FC115FB1ACAF2DA2A931193EBCEC57807C50C1CEE4CFBF07D5DB775B7FBA96B6C17F4F70809E879E8BFFFC3405FCD16EBCFC31E0DF8407A66A93FC895872629A58CCFC0BE36D3A6A9831FB8E7F1045DD6DDC5B7378F41813A8EF82AFC8A5D216950921188FB83E533BEBED63C08B283657B527821044D5073C26C8E965E20C93CD4968E57E90F29D415A6A0A20EAB75DC0396E0802A4C50C65FA53E3E8FE787ABBE2E4A5BDE45D62D99ED7C5BBE43F1584F06DCEB1C744E4EC639EF34D06D36B3A9800EE112490B422E61F311C2EE3444CCE1621F41808943868B35E7472A91B6A9D8F6430B5A5C8D2927EC79500C65AA203688B3BC2D9145D0D074E809664E11AD84B65CB3ABDF5284435050CE46A74E8DD0D070FF159C10FFB762D874622606580D4EB256413C935E7CD16756356B6281A40EBA65B2A48D28BB363416C0E573C40A650222B6B66D8A992B5F8CAB38E25D162A92B003571CB9D03C05ABA4ED5FA8EA52C9228A8C3B7AA91E400957B7C149EBB1324D80C98E74B358128B7B9123D70CC1EED1AC2915CEB2DF961741D997C49B2202EF29C93CDB524C39124B19B03DD6ED1C637768D3E13C7E4522D7C6F45972C31563E6691E0EC894B83BAC05EBAC5D4AFE97D787BA593AFD3529DEFB65A2127E307256C0281C3753C5ABAD11DE410F10C7AF6E0544C3A35381BFEC9B529DDF4699E3E31409DD3F08F6555BB32024E5D3207FBA9894097A5778B7ED4C895BCB71C4F090108EE70C95F3825AA9D1DC181EE7154B88AEA418647B2CE651A0C2D1DFB6DA064DDB3FB400B3C74A164BFC26101A4FACFA498CB9D5C96D821FF87E0993879475BFACC5E95ABC7446F9DB0AC8F4D0CC0FCF25623C2633FC561747AA1BFE5FF36FE16AAB2888EB2919B626B12EE382C980B3E36A60FDEDB50C2F28D58F2B09501A07654412E6D469B1811DDAE28F1840BF794ACBAC9AB9154F042F0D049862AE46B7633474E23D5B00261DA959EAA00ED477EF4232B097EFB91A7229305025C6C1718CD32D8DC8849E90F329A96FFCE4473389C8416604A49A10A75C390A499358FD43429DB8EC1AE50ADD3A1E75E334918B0F8618FD4DEFA12AB9CED6E4510A665774FE5B43EFDF36ABE621F42331993AAE6DD4B3A42316EF89CAF4C06AC654A62F4BF98D3A9C72E7CA148EF39B23687B1C356EC08E9BDCCF75ABA0286FC31EBBFB10C4C24E0ABDAE7EFAF375951B73FE4CEA2A2F888556FBEFFF32884A3BA05B743DFBF5CB2A04DBB0AA189179F903347B04C170EC3DAD859321FA76EA7742D97AFF9770350447589DBC44795AAEB4CB559DEB276816245F6D5D027E490EE02B5ECED1075911DF2C7F74C38A557ADB1A4C6B0E839E193896440A89239082FA52BAC659DF607124D448DCC8AD9A52841AFEE501985BF77715E95CD3BB7B269DED8A6E7E34BD858AA872F3A41A921769B0E19FEA38E527BC89B5DEE889BCDA46CF36319D785285573CDCA656EB0A8F436E239E1C372B3188E10E459555889BD93B2C3A9F1C4EAD77D905D8CB79C1042F9C1F1677EC3F6310B8B8A0C9DCF6581FB8EC73E4B9A8E4916961B38E5D15943489A466113336AB1F79A3D83AEED6E1B5F3E635EE49293651BAAA0DEA6A50C6784C72661A05D4FF8A0B403663A82D378E4828F8240C9E9257177682DAE194912E234FE6EC882D3E63FB527847509F8D49CBC613A8ADFE75C362B037B0FBA022555B0F4C368AC48D47864F9993928F85798D051A7695BC12BD8D4A35E9ED3A23B9F75518414D2AAED0657AC5E16C52E94629EB99FC9BE75F60448E26B8E6DA3FD0C7C7937F7D38E642F2328C58DC3A2E27C92766FBF245A2231D7DF2F900A660EB57382086FA5B6D7FFCA8701ABE1D6BD72D5F0E03373EC7AC7028D3285676270E0772FFCFEEE3F93284589CE6BC84A102C6D92E1855E1086E9843E4FC54F13685536949F0DF2AEAC402C200C01FCFE76530953B0468FD4F84E839D0068E1D4EB76052B15254E7B35687258AB49D9266FCEA00E4E3AE5BB014186EA1BFCCCC990FD71B31C1E762236D61944923F49EA5DCA31A96014BBB0D1AE0F6E6858D0E08AE039AD6A3CF6394713F3D26AD3929C828283D03BA895300DF3E8C62CD9E9F2F8409126347EE381A8C73015FEB53526D808179CD6803CDDE25EE50EA61F9E6771DF1A7AF747DD54EB75E6CB1AD69A9A972826801B573B4E5B1A028B6AC8FA843EEB714569519A7A400E672425AFAF7631577F6296C1C8CC99B77AF1A015EEA30C9060CC1716A9CFD5C4F0193A27F02E55D408FA9A871CC85E88B34B51B7C515355D8885810359010155058A06152D1F3B88C4AB35EFE1B52F85926340028AF552A009B8C2F5C02D1E02E3603E80587A914FA14E314643EEC8710126DB88F5E8193701A4CC70E51C849D0C26CEFB15B47137972C7B10A82601589558F31B13EB5AEE0794AA870F46DA2B9EE5FDFD7348EB4524F23FFE8A2A06925DE8824404A8AB326AF9512F818BA12F11BC34AB9CF38B814C712590DCEB57E8CBE773802FB3DF3FF54ECD9BEE605520B962D5EABD2577C89B58749B6BE5F488C10A6E70B3C8A94B59BFC66F3147C3ED9791B2A4E9EE3D172121583E01203BE47B3F9D491C55B1E44DB96BB7F1B3FFC9E45DC17C10ABA1187039D0DE8EE0F7412D35CC25F851B0B5AF748605E1CD5CD6E7DC1D8A79CCD7AAC01788DE7E76D922BB260634B8626DAE89B9516B5EF847360B29993DA9273D9A023ED74A9B6D7F8AE38703819EA73B72F03F168787F2C9105DFEB95AA4D980E1A763D9D1E3018E9210F1E2A41B6853AA3901AC0E26C8C6E16E9E574DD94F0FBC6A7386FE3C16131FF2A0F6618A86C6A6A8B83A3D3224CAE58D44D53576A49DE6A50350C2EFEFA754E0F092AD0E6BE687D33A084814D6B9D07A64349DFAA2A3573CD4A41D7D7154219BAE34296402974CCB1EECB254634AE2AF0BE754A48D142BE23BB108C1D217B05FBBE1A81DA76ADB9BB90716ABFD5E6625286B9FA2F9F1CFBF808B17188A5194B9FD7F0D992258623EA1BCBC7B33B30AB56904DA85B05480BC7FB3DF77CD3263EB509B98E6E4EAA1B68A487C5D74286F17B488C6EA36DCBF991742D7C05F67159E03785A28DA6504EE65A3B76943E61E24C02442A734CDF463EA74B789A50E22DA1BA35CF631CDD6D602F3B1CEAE80C0CDE18755E5B80E810004AEF5C22945EA92BDDC7DCDF60DC7736C564E64AB4CF0AC4D584EE847B5FC8C5476EA076CA631BCC8AC09B9E6E5F419A51D63736704F71D408B41C8CF6F85BB16F48BD2DD086A0D6BF2D724F4601CD332BBF03324592721E2837290B0C38174CA7002133174473030FC9F06E92BAD21A1E89847461F78CE97947014786056BB59FD64850A15B40041FA406592913DAD501F09447914D6A3A973D0813D74B181DD90B75B39C3FCE9A9B5260E7800CF7E183804636DC1963EA07307230E8AF13D8D12B096A699F97E88F065B57661DE336691F377B57156788AF5B72A17494C4BD2FF30B97F53B79918FC10947595A470898186AD79804B94C4875678F61D4659C66430B96882AED61139E47E978E3F931497147B0426E6F8AD6ED3F947FCD79E912090D010FCA4785B55E7E81A66D84E794128FD0D161A11D3691475515B131024854FFCBF6CCC60755FC5D9EF4E5ADB54C310E6A6390DE8F1EAB77563D7956F4E3608A42E264171F450E84C95C3453424B05A0A7605F83822C6E616A189763BABE5CAA6F8D9F572060F43F9E3CC824F6D885283FE3917D782746F6456B33079CF0BD3FFC7B7E99581BB5769164FF4FA2BF3F567F8D318134A74C4BB73867B62DFB880D385111F37FF85E20C5C0624066C94E84ECF4F3616BF08C3252AE202D3601E7B604B7411145671E5B83310979522E6C7913F8F86A601ABD0D74DFB7F12D315134D9E99967D189302644147FCBDA3F198A64A150B93E6573ABC52A264FA02E76D16F236651508F899403EC42C8560B1262C906D9CAC83C7F070EEFBD34B8140E9F135B692C4BC8AD24788604F39D9EF4691D18553A73BAFB9A5B87EC8B89271D9A6FA7D408E217854F6382DED3B267113FDBB9F06092013FD4615C3764C317660E543623544C8103062B8B627152C355376F9001F3DF3ABD6ED902D192CF5D13F7FD0CE1577F0D2D98FB2BD56980B71D4C9BD398C41BCE2451D5CBAD32CCCAF2D10831351E225F7E816CF5B2FC2809A3EDAF661FE0D094E3FDC7206C51AD281974108AC66C768DA8E4F878CBA3C444870D143C5BE61FD742EFB23F49DAA856868248A1485731B8FAA7EA576813CDE52E53936BF8279252274D8C503B9CA6C3227C942451352929AB3AEA712DC1943287E3D5E961544970F55FDE625D70856BFCC71DA7E17A16B8B7D0E72F5800A944F3621AF1550F9D6C3FC38B2432AECEB603A2CBAD2112BEF5912D1AC3440F0115ABA7F14E8250493170BD57CD22E77594549E5890CBE07E7E1869221B74FE310618A0C2AA655B2DDF169CE99963AE88F71EB4F921B5214EDE2D20B7B2E08F9B5A2717869F487E03475A441C87A3C56DAFE71B3A6281861CCDF2B2C3A1C3DB5811DF1406AF1D0AE68BD073CD6FC495B0B92293DCDC2C0EA9ED4A8F885143D8C83473C242A337FF53B484184BC4A714F30CCB47EE20EC4E8DFE7E0C4EC30D4BA2BF35062D84B432110255381CACFE896BC5229877AAF810B1721A0E45BF17A28000F7CAA94472EFB2DF5D3F9D20027EAA3773AF5026667431DF4E14C106B2254D6264B003C2B7CD85532532F65EA0AE1C6E1AD2FE94FED30F2DECF50026C2CE8E7FF8B9E5BE6BF0FCE9EAB51A394AF599F6F0535E4DC4872C62075A2D8F204F59BA8FF4B353CE93591C52034165405E901F3708FB8122BEA634E59B457E13F5DFFF91E41B2A2ECC8EEDF283439597B911227F3AC55035D79DAF9ED643F58CB8220380E32FDBE24F80DBDD0106A2C3067DCB6196341BF42F6A61F6BD174C58D4B955DE37534A20D78E887F5171C4204FC7028B1CE63A3A02C931F84B66C181AA793709A3E5994D7AB2D1553BF91E85EF3E37DCBE3C511D4ABE3BE511CE9B1D6408F85AA3781F76F1A3413675C7685B5BDE6D4225172BD2444E7CA7B33A9463BB49B5A0E536FA06BD4BA361C15E72641DCAC5B8E8F666FF3EC0DE19C5A0A88E07A5E65BD0429F637DE52485BCDC1079885E79605DD50B628507D4D35890D69ED4670C9929BF96B9D9DC06782314968541E940E2965D6A75C538E820C10188FD8FA4E24003E9890976D121458ECC632C815BF1320117F9FB7B885166BF31C5C6297A1AD94E3C4B1BE0FD8746DC164F63212B907F304CC071094195B0D98E8D69FC189B5BB9C8AD1399536CFAF78E601BC2A8EC5C5A1DE752F97931F0DB101B1DAD81EF9C7D5BC54B6E2B64C740A46D8979FAFA703C43C0646D6872DB2200A75107188E18F15FF66AC31107F0353D9542E7E8FF4285B11AC1806B45267215B9311E7E763480FBDA6C04C69ADCD5FD0CED72C86DDF3D3C848E840BDF9BAE91FCEAB5449B06494D2017865F3D2233976BF0F47D00C058DE2C5B633B587AFDFA9CEA56848F401E9A097D35F450DA11303555FA9081B0A8EDAA5AE076CB56879DF18FD55667A9B6B02BA601A953C0B59A07B73BE9948C6A7E6FD764B42EF7356FFFB28F6DD3BDAF7171A4DBB2BBCD96E44DB75525C92DAC6DF16CD72B9E34B7B5B9F6F86291966CF78CD2CF18528B7B0E1E16C5289D5D843F3B6CD0EF016311FDEA5BCDF8EFF803E8AE6833C9D5AE88A3D1E9CAD0F4F40D24A23D2A724CF366DD15CF0676F3839E284A0773FF81847B9C1A78756FE5EC1AE6D691E9D46633FF805CD164E9F67ED8D6AB409012906A65E6787F700E14EE8E43CB94D6C247235C918EDC2E086ADC585C4E8E183B5ADDA8547A9ADB1C49075B03E4C460C21AA72B65C3BBEF8E5D4DC8B0134BBDBB9B52AC6C9CF5CE5C9BAB9A16BB2318F90F65DBDE15A9217C92CC2F77707F0E2A6DA316684FAD12A6F9C002088A69F9C7B1948478BFB628792541031A6321B89D766737D22B89ADF3D4E10159ECDEEE525DBA70CF3545F1490E3B08FD0120820FE286690917A5CB165EA240652076C0E8CFBFF1B5AC7B477E0FFCEFDEA4F63E10517684FE45F6AD0324387438BD2DF4A3F147DDE6AE4E42B0CF35689D606E47F2DDA451132CD3D45EB2F13DA6A7E8EA484E2B9BC3B413C3167F738FDEBB98E7823979DB1940BD538EADD236644BFCF77BBB9561D74984A2925796A3B4A75E95D308DE1610D974F2A890951A4EC0632A0AFBF9BA012476567BFC9C36212DA31E6C5FA318C1CB471938895794F8864F9B87870CBD93BD49DCEA2FAD00DE88F3B9EF9448BABC1581AB7D2C50A4D91D1479BC8A5E681831BFF1386B572D60295D216F39AC7421E759380BCE7E9491379EED204BD29DB6C25022A9D28A3809240087AFCD4AD1388FE31C61B6DF0A77AFF76C86D9083DE3DC8A2B5AEBD94602F513B3FA4A21F29C6579A971BD8AF96BF91E6FA59BDA9FA1B548415FFD6E0BF8C31A11AA2147E36A1340F86CED8530907A4391EEAC0B0FCB28667FDCEE4E6F1B419A7392F5F96D3D7B07DD66C7175951D4FE69836248A5EA0FA7505822B93E77E23A7B6307885326DC8CDEFEDC106209E2A1AD362513E1BA58C613A79F2F77CAFB4D14B6892FDB6EAC1A0099079C0C19C14C2C6508B9C4F5C1BF37F03D6AD57DE67D9D047C3E4BD62C5D4733A0F33C25879B5753C7351FE9FCBCB5D57B178282DF14FD56BFCF1C72A9FFBBA50057DAFA4B14E4EAC1EB17E82453EC42FB35DE4F23ED77573C3007E50CEA8E92370708295D186CEEA3D8356199706200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark%RBIEndFontSubset
/Inconsolata cguidfix
/F1.1/Inconsolata renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
q
0 0 84.325073 44.725071 rc
0.1 0 0 -0.1 -10.487465 48.012535 cm
117 353 m
463 353 l
463 468 l
117 468 l
h
117 353 m
S
/Cs2 SC
0 sc
0 i
0.1 0 0 -0.1 18.512535 6.9625354 cm
/F1.1[ 16 0 0 -16 0 0]sf
-168 -39.320007 m
(!!"#$%$)[ 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 0.000000 ] xS
-168 -21.880005 m
(&'$\(\("\)*''+,+-'."/)[ 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 0.000000 ] xS
-168 -4.4400029 m
(""\(0$01&"234'1&"%+1."5$16780-169"$-9\(:;<"/)[ 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 0.000000 ] xS
-168 13 m
(""""8=\(0*5>+30>2-160'67?\)*''+",+-'.@A<B)[ 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 0.000000 ] xS
-168 30.440002 m
(""C)[ 8.000000 8.000000 0.000000 ] xS
-168 47.880005 m
(C)s
0.60000002 i
/Cs1 SC
0 0 0 sc
0.1 0 0 -0.1 -10.487465 48.012535 cm
718 252 m
936 252 l
936 315 l
718 315 l
h
718 252 m
S
/Cs2 SC
0 sc
0 i
0.1 0 0 -0.1 72.21254 19.662537 cm
-104 -13.160005 m
(!!"#$%$"8*-%*-"D$9*)[ 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 0.000000 ] xS
-104 4.2799988 m
(EFG"2$9*"'$693$9*H?I$%$AFJ)[ 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 0.000000 ] xS
-104 21.720001 m
(EFH"?\)*''+",+-'.@A"FJ)[ 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
0.1 0 0 -0.1 -10.487465 48.012535 cm
423 261 m
657 261 l
657 306 l
423 306 l
h
423 261 m
S
/Cs2 SC
0 sc
0 i
0.1 0 0 -0.1 43.512535 19.662537 cm
-112 -4.4400029 m
(!!"2K2)[ 8.000000 8.000000 8.000000 8.000000 8.000000 0.000000 ] xS
-112 13 m
(EL"2-1607?\)*''+",+-'.@A<B"LJ)[ 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
0.1 0 0 -0.1 -10.487465 48.012535 cm
566 353 m
936 353 l
936 468 l
566 468 l
h
566 353 m
S
/Cs2 SC
0 sc
0 i
0.1 0 0 -0.1 64.612534 6.9625354 cm
-180 -39.320007 m
(!!"MN)[ 8.000000 8.000000 8.000000 8.000000 0.000000 ] xS
-180 -21.880005 m
(&'$\(\("\)*''+,+-'."/)[ 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 0.000000 ] xS
-180 -4.4400029 m
(""\(0$01&"%+1."O$167<"/)[ 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 0.000000 ] xS
-180 13 m
(""""8=\(0*5>M+6\(+'*>,-10*P16*7?\)*''+",+-'.@A<B)[ 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 0.000000 ] xS
-180 30.440002 m
(""C)[ 8.000000 8.000000 0.000000 ] xS
-180 47.880005 m
(C)s
0.60000002 i
/Cs1 SC
0 0 0 sc
0.1 0 0 -0.1 -10.487465 48.012535 cm
454.5625 153 m
632.5625 153 l
632.5625 198 l
454.5625 198 l
h
454.5625 153 m
S
/Cs2 SC
0 sc
0 i
0.1 0 0 -0.1 43.868786 30.462536 cm
-84 -4.4400029 m
(!!"8Q1R0)[ 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 0.000000 ] xS
-84 13 m
(2-1607?\)*''+",+-'.@A<)[ 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
0.1 0 0 -0.1 -10.487465 48.012535 cm
653.5625 45 m
935.5625 45 l
935.5625 230 l
653.5625 230 l
h
653.5625 45 m
S
/Cs2 SC
0 sc
0 i
0.1 0 0 -0.1 68.968788 34.262535 cm
-136 -74.200012 m
(!!"#$%$8&-120)[ 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 0.000000 ] xS
-136 -56.76001 m
(EK05'J)[ 8.000000 8.000000 8.000000 8.000000 8.000000 0.000000 ] xS
-136 -39.320007 m
(EK*$.J)[ 8.000000 8.000000 8.000000 8.000000 8.000000 0.000000 ] xS
-136 -21.880005 m
(""E\(&-120J)[ 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 0.000000 ] xS
-136 -4.4400029 m
("""".+&35*60>Q-10*7?\)*''+",+-'.A<B)[ 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 0.000000 ] xS
-136 13 m
(""E!\(&-120J)[ 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 0.000000 ] xS
-136 30.440002 m
(E!K*$.J)[ 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 0.000000 ] xS
-136 47.880005 m
(E4+.=J)[ 8.000000 8.000000 8.000000 8.000000 8.000000 0.000000 ] xS
-136 65.320007 m
(E!4+.=J)[ 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 0.000000 ] xS
-136 82.76001 m
(E!K05'J)[ 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
0.1 0 0 -0.1 -10.487465 48.012535 cm
117 45 m
431 45 l
431 212 l
117 212 l
h
117 45 m
S
/Cs2 SC
0 sc
0 i
0.1 0 0 -0.1 16.912535 35.162537 cm
-152 -65.040009 m
(!!"S4I*&01%*TM)[ 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 0.000000 ] xS
-152 -47.600006 m
(N16&'3.*"EU+36.$01+6!U+36.$01+6>KJ)[ 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 0.000000 ] xS
-152 -13.160005 m
(160"5$16716"$-9&V"&+6\(0"&K$-"W"$-9%:;<)[ 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 0.000000 ] xS
-152 4.2799988 m
(/)s
-152 21.720001 m
(""X8P+97G?\)*''+",+-'.@A<B)[ 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 0.000000 ] xS
-152 56.160004 m
(""-*03-6"YB)[ 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 0.000000 ] xS
-152 73.600006 m
(C)s
0.60000002 i
/Cs1 SC
0 0 0 sc
0.1 0 0 -0.1 -10.487465 48.012535 cm
454.5625 63 m
616.5625 63 l
616.5625 108 l
454.5625 108 l
h
454.5625 63 m
S
/Cs2 SC
0 sc
0 i
0.1 0 0 -0.1 43.068787 39.462536 cm
-76 -4.4400029 m
(!!"Z34=)[ 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 0.000000 ] xS
-76 13 m
(230\("?\)*''+",+-'.@A)[ 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
0.1 0 0 -0.1 -10.487465 48.012535 cm
117 243 m
375 243 l
375 323 l
117 323 l
h
117 243 m
S
/Cs2 SC
0 sc
0 i
0.1 0 0 -0.1 14.112535 19.712536 cm
-124 -21.880005 m
(!!"8&$'$)[ 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 0.000000 ] xS
-124 -4.4400029 m
(+4I*&0"\)*''+,+-'."*[0*6.\("\\22"/)[ 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 0.000000 ] xS
-124 13 m
(""2-160'67?\)*''+",+-'.@A<)[ 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 0.000000 ] xS
-124 30.440002 m
(C)s
ep
end
%%Trailer
%%EOF
