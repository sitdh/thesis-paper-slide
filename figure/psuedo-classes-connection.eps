%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 573.250708 276.250708
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.3 (Build 16D32) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 58 28
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 58 28
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /C put
dup 34 /one put
dup 35 /m put
dup 36 /two put
dup 37 /three put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<



2BB800002B000000
00>] def
/CharStrings 7 dict dup begin
/.notdef 0 def
/one 1 def
/two 2 def
/three 3 def
/C 4 def
/m 5 def
/uni2B91 6 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4243299 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C977ACEB10D7B7CCAA782B3E10A4BEAFD6991C7A5E7DAF786CA93E9C7130DEBD28BA4C9AFE439E5989355A2D991A3C3DD3969DFF96D799CE7A3D70FB31B7161B2FFE548FD50365A5C79771B29183C200A29C065FB39B8981E06443B30B18409CF1AEB07E006B7890DFFBC8366D1B726738B6A563E88A0D8A9A5AFFFE49DAFB9658227DEED281DC9691360D5344A91DADC8555FBE0415046653E2A380E5E9D2ECB7A97C1283394084FEC5CAD4C4948DE7887DC1617CCAE1255A70DC04326CD9B636DB50A99DF5F6E17DDEBB464E76D8008A96A76008559B8381273C7BFDD2B92C40170410A49124F0FBFC6E0FC9C813ADC77943248411A0FDEC040548823DB6C5338A02EA85F7782187B6ACE2AA6EA28FF5A726CFAF8AA938634667D3DB8F36E231EB3B36BE36A23BB01A79A434810033C93F05682D5179FB8A97A78F163F4472EF927DED8B0CCCC8B372E9270BF9E901A149BD5125CF01411DF4201AB542C46BF9CA281A0B9C9CA75B9BE388CFBCCFFA3C6AADCEBF8A46D37DB9ACE326D555932BF4D60F0308B1D6ACEE91CC64F1AD78A1CB134337F8C18FEBCB0469DC321AA7A8F9C1BCE9D5E758633DF1E7D8F184CBB0A2507A80E687DDC3F270214A0E4A6DC860D497FC3383D39F1B846032A3FB2259613AF159C341C20B194190F1387ACA67D6829FAAA4B7F5D456F1B31E7A941EC4405119F12ED69F25BF836C46CF0D878BA9412710A76DE4D24FD46B20181DE9DE4608780A39994B48432684CCFBF5C13A9
AC5DAE41A2A1E2112217C0F65360942E9D7E068C03C2D7BB71056CCBFFC81B6025873BA354E55BA2C78168CAA8D369282663F716166752D0D5F4C9B43642BC70B7F085E9A2B89D96BBF810834ED116C8E793676798EE999B22777CE4426F59F34B49FA03C1C13526D22874DF374F5A1A72D96F6A7DB28C208B28AC725509E6E69139005267BB5CDA83A61833D86E54C26B3E8741C8FA4DD3A6CB338F9567BF7F74446442A250BDE4568C26B55CA77E2C14639E83EA5127D80A2C809D473F8A16BF28302F0CCF5AF513641D04C7D5ADD537E9033E646EDBC9B61878BEA6F116AD95CA780C923ECB4C364DCFFB1C20457C17E64067C21D69709798F61803CD68C23F9BBDC2EE7635B0A75E0B3DB19DA67C945DF818F5356DA57616FB6D84F1017CA5BA3560DBA783899AECA5A5916901B4D7DD4B27036AFEDC63728D801867875691A747B12BA85D00CD36095B039051176836DAF56F162AA6BA8F5AA25037A645D513CD1FA8C74BE9A400C25C27DE8982EE0334CBD6D8DD88A4990AEF092B2E75FA0F32051A7A745C4430C1B6B4E1033BBA8FBE79BE817B36A65A2272388AB257DFF37FF5FE50466E16ED3ACD674D06F0DF66306E261C7DD2500637AE9E4F49FA33B827141842DACCF72025AB113B0867AD954D575BD91F2E95EC2712C64410DDA0BE36A3DFBE677A913842BEE690DAE9514B8B3A9159DFB4C502418917863DD85A455FFB4011595AC74B894D3C3AB12945516B38011E7FF77DEE73F1EE6D353712CD95CB343D161130B1059A6DCE8FE4D9EDE42B547111C4ADE5DA4E3014A6E40985685A4112BA618A36D991A3F7B8A31D7768BA21C9D5C5340F0F4ADAADD5683750B4E89C3FFE260519AB7F877FFB8232AF6F0AA353C722CDEF815B2B4AAD0FDB8364A3C0CA266CE5A76515FCFA9327915C37B4778DAACFE2B153AC1812C4A6E35234DED252445B545A4A0BCCA8E85A568E5700ADAA9A6D7E0A4BAF7E9B4822231E0F5751CE66AB54FBCE5792BA1C660FDD7CEADBBF0D4A6DA85B5DC23AD9D69C489CE2E569733F902C14D568E5BD609EE401D7F764A967F5FD1B7ED9AEEC20236025573C9687E522A078D6030DDA5F153FC6224ED4EBBA107C8012CEEFFF87C96B728907A1B26FC9D1CE9C829F907CC0465113E18856D1716835FEFAFB1163BE70F784C40070F3FA6819BA65E05028B8AC02EB697EB05F0C208D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 57.325073 27.625071 rc
1.2125354 26.412537 m
16.512535 26.412537 l
16.512535 1.2125354 l
1.2125354 1.2125354 l
h
1.2125354 26.412537 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
0.1 0 0 -0.1 -92.387466 166.81253 cm
936 1404 m
1089 1404 l
1089 1656 l
936 1656 l
h
936 1404 m
S
/Cs2 SC
0 sc
0 i
0.1 0 0 -0.1 8.8625355 13.812535 cm
/F1.1[ 16 0 0 -16 0 0]sf
-9.1120005 -106 m
(!)s
/F1.1[ 12 0 0 -12 0 0]sf
2.4400001 -101 m
(")s
/Cs1 SC
1 1 1 sc
CM
3.0125353 22.812536 m
14.712536 22.812536 l
14.712536 17.412535 l
3.0125353 17.412535 l
h
3.0125353 22.812536 m
f
0.60000002 i
0 0 0 sc
0.1 0 0 -0.1 -92.387466 166.81253 cm
954 1440 m
1071 1440 l
1071 1494 l
954 1494 l
h
954 1440 m
S
/Cs2 SC
0 sc
0 i
0.1 0 0 -0.1 8.8625355 20.112535 cm
/F1.1[ 16 0 0 -16 0 0]sf
-13.496 3.3320007 m
(#)s
/F1.1[ 12 0 0 -12 0 0]sf
0.152 8.3320007 m
("")[ 6.672000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
3.0125353 15.612535 m
14.712536 15.612535 l
14.712536 10.212536 l
3.0125353 10.212536 l
h
3.0125353 15.612535 m
f
0.60000002 i
0 0 0 sc
0.1 0 0 -0.1 -92.387466 166.81253 cm
954 1512 m
1071 1512 l
1071 1566 l
954 1566 l
h
954 1512 m
S
/Cs2 SC
0 sc
0 i
0.1 0 0 -0.1 8.8625355 12.912536 cm
/F1.1[ 16 0 0 -16 0 0]sf
-13.496 3.3320007 m
(#)s
/F1.1[ 12 0 0 -12 0 0]sf
0.152 8.3320007 m
("$)[ 6.672000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
21.012535 26.412537 m
36.312534 26.412537 l
36.312534 1.2125354 l
21.012535 1.2125354 l
h
21.012535 26.412537 m
f
0.60000002 i
0 0 0 sc
0.1 0 0 -0.1 -92.387466 166.81253 cm
1134 1404 m
1287 1404 l
1287 1656 l
1134 1656 l
h
1134 1404 m
S
/Cs2 SC
0 sc
0 i
0.1 0 0 -0.1 28.662537 13.812535 cm
/F1.1[ 16 0 0 -16 0 0]sf
-9.1120005 -106 m
(!)s
/F1.1[ 12 0 0 -12 0 0]sf
2.4400001 -101 m
($)s
/Cs1 SC
1 1 1 sc
CM
22.812536 22.812536 m
34.512535 22.812536 l
34.512535 17.412535 l
22.812536 17.412535 l
h
22.812536 22.812536 m
f
0.60000002 i
0 0 0 sc
0.1 0 0 -0.1 -92.387466 166.81253 cm
1152 1440 m
1269 1440 l
1269 1494 l
1152 1494 l
h
1152 1440 m
S
/Cs2 SC
0 sc
0 i
0.1 0 0 -0.1 28.662537 20.112535 cm
/F1.1[ 16 0 0 -16 0 0]sf
-13.496 3.3320007 m
(#)s
/F1.1[ 12 0 0 -12 0 0]sf
0.152 8.3320007 m
($")[ 6.672000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
22.812536 15.612535 m
34.512535 15.612535 l
34.512535 10.212536 l
22.812536 10.212536 l
h
22.812536 15.612535 m
f
0.60000002 i
0 0 0 sc
0.1 0 0 -0.1 -92.387466 166.81253 cm
1152 1512 m
1269 1512 l
1269 1566 l
1152 1566 l
h
1152 1512 m
S
/Cs2 SC
0 sc
0 i
0.1 0 0 -0.1 28.662537 12.912536 cm
/F1.1[ 16 0 0 -16 0 0]sf
-13.496 3.3320007 m
(#)s
/F1.1[ 12 0 0 -12 0 0]sf
0.152 8.3320007 m
($$)[ 6.672000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
22.812536 8.4125357 m
34.512535 8.4125357 l
34.512535 3.0125353 l
22.812536 3.0125353 l
h
22.812536 8.4125357 m
f
0.60000002 i
0 0 0 sc
0.1 0 0 -0.1 -92.387466 166.81253 cm
1152 1584 m
1269 1584 l
1269 1638 l
1152 1638 l
h
1152 1584 m
S
/Cs2 SC
0 sc
0 i
0.1 0 0 -0.1 28.662537 5.7125354 cm
/F1.1[ 16 0 0 -16 0 0]sf
-13.496 3.3320007 m
(#)s
/F1.1[ 12 0 0 -12 0 0]sf
0.152 8.3320007 m
($%)[ 6.672000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
40.812534 26.412537 m
56.112537 26.412537 l
56.112537 1.2125354 l
40.812534 1.2125354 l
h
40.812534 26.412537 m
f
0.60000002 i
0 0 0 sc
0.1 0 0 -0.1 -92.387466 166.81253 cm
1332 1404 m
1485 1404 l
1485 1656 l
1332 1656 l
h
1332 1404 m
S
/Cs2 SC
0 sc
0 i
0.1 0 0 -0.1 48.462536 13.812535 cm
/F1.1[ 16 0 0 -16 0 0]sf
-9.1120005 -106 m
(!)s
/F1.1[ 12 0 0 -12 0 0]sf
2.4400001 -101 m
(%)s
/Cs1 SC
1 1 1 sc
CM
42.612537 22.812536 m
54.312534 22.812536 l
54.312534 17.412535 l
42.612537 17.412535 l
h
42.612537 22.812536 m
f
0.60000002 i
0 0 0 sc
0.1 0 0 -0.1 -92.387466 166.81253 cm
1350 1440 m
1467 1440 l
1467 1494 l
1350 1494 l
h
1350 1440 m
S
/Cs2 SC
0 sc
0 i
0.1 0 0 -0.1 48.462536 20.112535 cm
/F1.1[ 16 0 0 -16 0 0]sf
-13.496 3.3320007 m
(#)s
/F1.1[ 12 0 0 -12 0 0]sf
0.152 8.3320007 m
(%")[ 6.672000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
42.612537 15.612535 m
54.312534 15.612535 l
54.312534 10.212536 l
42.612537 10.212536 l
h
42.612537 15.612535 m
f
0.60000002 i
0 0 0 sc
0.1 0 0 -0.1 -92.387466 166.81253 cm
1350 1512 m
1467 1512 l
1467 1566 l
1350 1566 l
h
1350 1512 m
S
/Cs2 SC
0 sc
0 i
0.1 0 0 -0.1 48.462536 12.912536 cm
/F1.1[ 16 0 0 -16 0 0]sf
-13.496 3.3320007 m
(#)s
/F1.1[ 12 0 0 -12 0 0]sf
0.152 8.3320007 m
(%$)[ 6.672000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
0.1 0 0 -0.1 -92.387466 166.81253 cm
1038.3606 1440 m
1081.5682 1404.9338 1124.9515 1416.5924 1159.7673 1435.1664 c
S
0 i
CM
24.287313 22.905312 m
23.735659 23.557749 l
23.442682 23.034142 l
h
24.287313 22.905312 m
f
0 J
0 j
0.1 0 0 -0.1 -92.387466 166.81253 cm
1166.7478 1439.0723 m
1161.2312 1432.5479 l
1158.3015 1437.7839 l
h
1166.7478 1439.0723 m
S
1 J
1 j
0.60000002 i
1060.0883 1494 m
1096.028 1516.059 1114.2616 1530.6614 1142.2657 1536.951 c
S
0 i
CM
22.62566 12.973001 m
21.892998 13.412553 l
21.784634 12.82242 l
h
22.62566 12.973001 m
f
0 J
0 j
0.1 0 0 -0.1 -92.387466 166.81253 cm
1150.1312 1538.3954 m
1142.8047 1533.9999 l
1141.7209 1539.9011 l
h
1150.1312 1538.3954 m
S
1 J
1 j
0.60000002 i
1040.1643 1566 m
1080.0652 1601.6472 1111.4016 1614.3248 1142.1084 1616.7938 c
S
0 i
CM
22.62274 5.096128 m
21.837479 5.4328246 l
21.809715 4.833467 l
h
22.62274 5.096128 m
f
0 J
0 j
0.1 0 0 -0.1 -92.387466 166.81253 cm
1150.1021 1617.1641 m
1142.2494 1613.7971 l
1141.9718 1619.7906 l
h
1150.1021 1617.1641 m
S
1 J
1 j
0.60000002 i
1245.5901 1440 m
1284.8818 1417.5258 1313.7166 1429.0099 1341.2441 1443.2891 c
S
0 i
CM
42.444466 22.11059 m
41.876724 22.749081 l
41.596886 22.218334 l
h
42.444466 22.11059 m
f
0 J
0 j
0.1 0 0 -0.1 -92.387466 166.81253 cm
1348.3193 1447.0194 m
1342.6418 1440.6345 l
1339.8435 1445.942 l
h
1348.3193 1447.0194 m
S
1 J
1 j
0.60000002 i
1255.7533 1566 m
1290.0164 1579.9698 1315.448 1573.7163 1340.8649 1563.4524 c
S
0 i
CM
42.437298 10.776627 m
41.583511 10.744167 l
41.815376 10.190779 l
h
42.437298 10.776627 m
f
0 J
0 j
0.1 0 0 -0.1 -92.387466 166.81253 cm
1348.2476 1560.3591 m
1339.7097 1560.6837 l
1342.0284 1566.2175 l
h
1348.2476 1560.3591 m
S
ep
end
%%Trailer
%%EOF
