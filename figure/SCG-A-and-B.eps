%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 411.250708 241.250708
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.3 (Build 16D32) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 42 25
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 42 25
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /A put
dup 34 /B put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<


001C08B1FC49FE8007C300010000000000000000000000000000000401F400330288FFFA02AD004E04BE0037000000480078013C017200000001000000040096000900680004000200000000001E00000200042800030001B800142B01BA0002000200162B01BF0003003E0037002B001F00130000001C2B00BF0002004A0037002B001F00130000001C2B00BA00040004001B2BB8000120457D691844B8000A2BB800002B000000
00>] def
/CharStrings 4 dict dup begin
/.notdef 0 def
/A 1 def
/B 2 def
/uni2B91 3 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4243299 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C94CF017316529A80F552C33559AB2C21302561FE61E935C1E32B3C9EA963332618F471070EE193F61A94258BC6AD24214B0D5C35EA1380EBC43D26032C674BF749EACE9AA6138229683D0A55F704938EAEA24BEDCF18201FD678EDACEDDD532A75F4D55CA7E47877E44FE3DFF576C7B479D26F13EE6987DE0EC07DFA442C5F0CA831FDCBEA4F68C19071F523255FDEB6BBC840E843A82723E30CD6495A152AFB1CCFDAA55A9B99C12C4573C49D09D178D6E285CBD4FD808ED5A3C5299AE89E642B991EE7F69482D02B84F294D3D86DE599E43CDF923EE120AD5BA8152C3D04F8FE6D6B855229B492E2C920A2ED174E262C60877FF0BDAE76A84B641D7D07B050D6FB20D4D7089498A143D1316FD55B023911A9D05E1FFE871222D4C5FEC6F38BDE86512058F0F72EC0D9C08D296D1E0B37DF907F7D491ACCECD14C40B16E6416544031F3C34F6CF2ADB6615D96A5063639D7AA11DCE55566A2C430DB36E2C717141389E0CFDD0CD2C226D051B9EDC8607EEC9F4748B6E12074BCF982E27BDD64819A50D82D5F046CCA4E590B0C6A77CB0DC630E35D15FD94E86C407FC4071BA46962BEA149512EEF1ED3DE8C814FD8A4F164F525805AD0093EB5354F9033F9FD34C167BD9F5A13EC5614655DE4C9497BA301F0A5D82EFED33E8ACF20FDED51F6A69BBAF0A1327015BA9B5B69A09005FEADE6DBB45943A17B1EA3325A916B1F192043F657D51225C97028238E553B4399E03FC694C826C973C4B7B1FB14EED91F34
39DA414501E46F52D23D336CB254D46AE549F87176AA46C03969B665F85D0139FCCAA90C8B1FECD8814E26DE9AA4959FB37E7218FEEF7B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
%RBIBeginFontSubset: Thonburi-Bold
%!FontType1-1.0: Thonburi-Bold 1.0000.1.0000
14 dict begin/FontName /Thonburi-Bold def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /g put
dup 34 /r put
dup 35 /a put
dup 36 /d put
dup 37 /i put
dup 38 /n put
dup 39 /space put
dup 40 /colon put
dup 41 /e put
dup 42 /t put
dup 43 /G put
dup 44 /L put
dup 45 /P put
dup 46 /A put
dup 47 /X put
dup 48 /S put
dup 49 /u put
dup 50 /o put
dup 51 /fi put
dup 52 /l put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2560 -1591 1 index div -1517 2 index div 3941 3 index div 3650 5 -1 roll div]cvx def
/sfnts [<

00C6002300D6002300085D410500E5002300F5002300025DB8001910B8002CD0B8001810B80032DC00BB002A0003000200042BBB00100003001F00042BBB00300003002D00042BB8001010B80019DC30312504212027262726113412373E01373621321E0217161D012135342627262322070611141217271E0133323711213521065FFEAAFECEFEC0B9D065713933309D67BB011D61B1987A2B60FE9F53445257EC928A4C42014AC37084BAFE4B031660A57685CCE7014BB70130705EAF457B1C3855398064171746701A20DACEFE73C0FEC9690167763F0224D6000001007CFFF605EA079E00050035BB00030006000000042B00B800004558B800012F1BB90001000D3E59B800004558B800002F1BB9000000073E59B900030004F430311711211121157C017403FA0A07A8F942EA0002007CFFF605C3079E0013001E009FB8001F2FB800192FB8001F10B80001D0B800012FB900000006F4410500EA001900FA001900025D41110069001900790019008900190099001900A9001900B9001900C9001900D9001900085DB8001910B9000C0006F4B8000010B80014D0B8000C10B80020DC00B800004558B800022F1BB90002000D3E59B800004558B800002F1BB9000000073E59BB00150003001200042BB8000210B9001D0003F43031052111213216171E01171E011514060706042B013533203736353427262B0101F0FE8C0258A4E9414C711C23256B615EFED2C7B46E0123685D4753D3E90A07A8211F276234458F4C81EC645A62D67D70BFA4505D000001004CFFBB05EB07D8004F00B5B800502FB8000E2F410500EA000E00FA000E00025D41110069000E0079000E0089000E0099000E00A9000E00B9000E00C9000E00D9000E00085DB8005010B8001CD0B8001C2FB900340006F441110066003400760034008600340096003400A6003400B6003400C6003400D6003400085D410500E5003400F5003400025DB8000E10B900400006F4B80051DC00BB00080003004900042BBB00200003003000042BB8004910B80001DCB8002010B900280004F430311321151416171E013332363715363534272E012733272E012726272635343736213216171E011D012135342E02272623220706151416171E011F011E011716151406070E01070E01232224272E01354C01752A28388B4F4078365B4A36914F016675A12D7D2B38ADA00171AAE941454BFE8B0E1B291B4D4A9257484A392D7A4C7799D12C6A2C2A217D5245C57FEBFEC050292C01BE16556B181D21302E0150A788412B53212930542568557274D0AA9B3B3940884517171830281F07155A4B825389281C3E203443863E989345914B3B6D2B232571734186420001000EFFF60652079E000F005B00B800004558B800052F1BB90005000D3E59B800004558B8000A2F1BB9000A000D3E





00>] def
/CharStrings 22 dict dup begin
/.notdef 0 def
/space 1 def
/colon 2 def
/A 3 def
/G 4 def
/L 5 def
/P 6 def
/S 7 def
/X 8 def
/a 9 def
/d 10 def
/e 11 def
/g 12 def
/i 13 def
/l 14 def
/n 15 def
/o 16 def
/r 17 def
/t 18 def
/u 19 def
/fi 20 def
/luthai_saraaathai 21 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.000390625 0 0 0.000390625 0 0 ] def
/FontBBox{-1591 -1517 3941 3650}def
/UniqueID 4153580 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C92608F4984E4A5769B1336AE461E05CD208550769783E471D7C20DE95AF973E3C7100591D725B8FB1A8B94E17CEE8DA8DEEF2E4BAC3468F15C0EC4A059CE27C6D582BC3670C14E80A0FA1208850E500CC2C4CE43A015CD1ECF04D355840F1CACA3A8DE7586CC8A45425BE6ED6789F4FDAFD61F2BB381921491D3972857B89A68B059FB06CDD4F2E617E7DDE2A7A78768F14792AC7CB550F8CF5C6587075553FE40917F70F817D73345E6DF0A3E99B270D9FF2727044B47FEC164B9BF07E7A3806BE4324615F4E3803917DE333E440E9678E66B167A2B6E13155B0EE59AD2000CBA5B4B2FC3315E599492AB43EE069473CBBE1B11F10960851A62035FEA34CB2E34ACFF6535878EC3E35F64E2FD08600D9DA45FC9D6A841DB094530C12E3339ECD0DDA4D04269D953B494FF1BBF076E11E2CD55BB9245323B9AA6F5A930839DFDB25CA9C92CC6D159C7CA5647E8968640932DA5D9E74AC8FADEAB13DF446B57B0A79A2E1F456D534EE5553C415AD4783379654AB62C955A67004A38B2B900175B97276DC2972DD9E2D3F241152483D10038B6352CF546F54B6ED4715BE55D17934AD107748EAF993CA07EF44BD8090855A0F1969DDF65730840AF8B930824B854CDA6CBAB40B6C124AD5CD80D6945447204327CA8C7F41E910549851A3DF7F29E67C59C4D7BA5FC202D09820D3FD24D887A09574F9EB61FEE1B7D7BF6BFC88FB0D5A2DB024F60F394732F7CAC83361C55E1CD9B4E5BBCD5FB2B397545757388735E
F455EA5CD61F46D0A2EB94EEDC9E44A194F68ED3C1BBD1D2A7D1B0E4BA3FEAB8B208419C026AB956932886B87BF13E6D05329DE3E475C097723AD793EB3AA1CA2A69084EFCF4F815FEF2F6CEC72A103F7672E5B58A10E621511337677DAD7E7C56444632B1E34ED84589A685ADB417E578939765FC984A4DA3E1D084473ECB89C14CB84F0E565CE38DA80BEC2F8779910EF0CC29119D4D96A5C092766C53126110278B544A7D18D6F9BF8A3DE3FF7256278B9C24FA12655352FC0EAE1C049BAFBBD314AB0B837340F7CB99F97F11920D00F41423E1622D31058B43E6A806862E0B93E981787E32A56B4072DFAF09BC260F749BC6C418BC11053401A311DA8985A0FC902C8EBE55A5156F3E16F322E0DFE5697185DE767C1CFAA92CE4198320B22D798D758A40287287A79BC18B2EE6A1FFDDE9691DFFA413797F78ED2B5E47D130959D4DEB9B3E97B55CDD661C9640031CFD62122C608DDDD628F4EB662349F800F50AA31C33F6402B577B7BA5667F07D2FE43A480ED3DA722E15FCF9DA48F4B24C6B6D77FE5BEAEC95553A28CFAABD1E25543FE4364B1DF2F25260B0016BBAAF97532593DE95B30573BCF5373580E015814E23459AFD7762B7494D8F3DE32846E1C31D911304D940840B3A72AD6F0E2DF85C79350409C506F1E0B09CB687D4780AFAE43E793EABB3753813BF6983B5F17EFF266FDC94CAEB4C5EA1E6B0E38259B7D124656426E4EE1C74081C27A36ED287E1C7DBFEA627AA113FAAF54D4B38BDA9898D65D5C3EB71BB1A8E525BDC39A3A89B993FCC5645054A5B99689F20E5826290D1A7A2F4969715461962069D672309950D11E957629BD076B0C75FF5419C6F727A5A33EEF8D66E7FA754AED49E30D3663958883809BD1FD674817A6A7AECDC2C782DB7ACBA7AE54A8A7ED8A62C7D6F2B71F61848B646EED538939A1BE6F811AE8BAB23C300BBF8385BAE9A60266AC2A2667448B97D72C5F58C9248AF6D1B7A7287906DF800645088C0DC01668071B41C1F29B1188B82112A156C3D33919ADD2AED48AC7003100D0D352396B6082C4F5A5D2CE77DCB88D19CC85BD23C549659318252C174649CFD72E7600D3E79DD5554836ABF9753E03CEE57FED94C6FAEFD0BE0ACD0B47B46257A7EF46626B3040203FD68043E6405DC72354F299260CF36BB07FED0A7FD1AEBDE48DC6DFD75049C556D06A7A04050B046433FB701E5287BB2E29407B631B40BFB7B08B11BC3C0B204C5310F1C8FA3093041CF6707A9485C9233967991FBA7501485186B1E230867A342056D907C6DF106F6940119208ECBAEBA35CF5D9F714B34B785BB509B8A10A0CC7E4931344E88D4A82C088267418F770F3E830BA70DF1D5DC495098A4389D5340DAF154903204C9D51919099A84BF900C9E7AEA4A3D5239BA482D338FBC4F1CF55FB00B971571F339ADEDBE97D
7A77FFD9C66A1C3CE5DB5D289F52962FE34005730601FBA8949378441FFECBC980ADC00DA5C34D5C26B8BE238C53C40E2FD3A73EEC03DA4E3F505B7833747C387200FAD2ED2C0B910DE857CE6169976B53C77301639ABEA4AB2226B19B2324F2FE92F56BB2DE69CBFE2F8DA13E9AAC67F7000EBBD069E39E5272E1203A0C363DD07D4BA2A5DDDCEC59FC4D6648FA350B7A3341F5A8979DDBF457DAC3A355311819FCC9B0CBFAD9147E14795DC75C5A41FAEF557530814F68A7EA7047E652990E48D6D8BB35D1F4B90BD0B4F868DFC82EAF5C46E836F20BAAFB60C4BFF5D0F012C0155ED4CF8A150D187BA69E77BC07501AA56C3E87B4C73E346D72A2FB6301A2090705AA4957B50AAE26DE6FFAF96C911BA5AFAD7BBCCC4247F78403264ADD95F700F43261335B513F1EA2EF43B02149F448C4F4746DE55AFD00A15C6340AB8EB7C264696A737604AE2DF94BD6F7904DC9AD2DD01E47086DC850F72FFD0CA455E212D5E2E88ACAB86B2B54BD0CD5D2180925D33849EC0A36B3416A1CB6ADECCCC3C6C6393CB4DC58ECA0C42D63CEA219C747BA87F095C359723B966B8C9CAFFDEA4CC648FB3B9BD1CD88E8F4201200EC1C6382D257DFADFC421E9161AC3E54BA9B1C31CD275743335E148645C78AD8987C41D0B27BDC275CF77FE568DC82A9DF6DCEAB8229BFC0EE57C7C3750AF8170F05D5C6D8F2C0547C5B05B520D4FD14ABEFC0B4CD88EB74488B8651FCE326BB7CAE9C0BD630687E3F2A06796EF6407E8C1F5514E950220DC2F760B03DF6F7395024568B366BF8C5D6BE2873E1BF58C45E5D5ACE1B45F647225F6DFD6C958DDC1F27320A0CA34A01A5FC88ABEEF88F48AF1334E07C3509F14706880561DCA5AE07941CEE5E52F267C6C61AC81BC6852F18BC3B801FE5C31224306728FCE613197E7A665DCA5826B0BE35972D70D400D8E2817465ECD217A8D9842DD1F7E78A7635CC648B4B0FDADF1E82ADE51E7805499C194D45A4BFD651117A36EF9B5F9614C5BB42E9395565B468D2F384721C51DDCF7E7B4C998CD51F5045F890B48D357875D46AFE053EBB81D8A351C63D163984EABAD9943DC00981D6A861332B1F621C93834F4BB7683EB039D463F0157DC73D9F8928895E5767437C28699602E69DD8579316916248690699D415921392CEFC709B8B210CCC2206CF8962EE0E87C6ED2428D5384A1ACD0549ABD49331AFAB3596A4CA6B3881977695A111A9DCFAA926811C0B461D01699CE92BB8A4CEBF01417E1099174606E89523636AD0E1710140194FDF49F9998085B78BE3C7DCF477B46F390ADA3FF4F27BE4A6FFDCB07BCC05835E472152BF41583F110824584FE01734438FFEF762FA279BC39F4D5DDB7FC46B6CFDE48B67CF954E33FEC8EA708A427CD64CE6EAAC2E68A2833CD6331C987283819E2835095D4B922DAD40567B787C06
0E6CC33FEC93C59FBDA3FE149B9B4C377966045C23C2ABF2BAD60482C280736ECE2C205C112EAA3CFA597ACBF02250FF419F342AEFD88826BA025227972D8156316109EB686CEF9748718A29881CD5F9A7ACC417A0074A6E41243331BE1EC1BF5CA7872651C3AC7EA4ECF106460D6C75B9EC8D8885D6F07C6DBB4646C6456A4296AA326AD3F943D7E6421A2F90282F1FE81E4250845DADC503E52E12FBAC8A2D42B7144A2D8776CD417B139328331A20D158246D7EDBAEB94137ED75B2D06BE1DE3E39B31C3DA88A02FBBA7EF4532D0349041842F5B6CB41D7D2DE9AEB94239BC1F7C79151C56FFF04FDD0582D187A896FD9FE3DFE80E0976D9AFB5D096F55D5F22ACDBD03CABCD583C0CD0D58FDB8AEFA6353E10F6CF3C6191665EF9E9B871EAFBEB48CA1B38E2A92646C272AE012C453E41A9B07B1D2C1D6C83861AE4028A34CDC36D73B333531619617151D731C72E8BF5511817350321A441E85B2E990C603802279DD742235EF417D2CCC3D0018A8B87462CA19A1A955CC59FE27A1C22F235807681CDFDC929C6903ED8D12B840D7077A3A9E85FC3071101A66386D7A0D74708D876927DB173CD45EFBDE5ED56BBB37A700D1666C61221F84E566F07DB9BB4AA23D231869FC84D657D0B3E4D60D10552FD420DE9F8E537401BD946016B9A40792EDE0AC5D0D86C0DE564DF179B03E02526F6365CDBDD7B8A40ACA77FA6E2F107AA4DC348AD8287D5B9AD0DE9B45FE5B5CCA6C7196DC140B1544066425697FF420FD312DBDE6B42A1D3E47B1D2FEBFA0568BBC457DCEE296FE62538AF937278B46957E8A53F3898226B21CD0D081933550DAAF51F5C18EAD9F5DD1DCE8F0B4AD3B0BFD0E7EE4D2CED52469DB32E2307D48B2E91B7370091A957C35242712533AC2BE31CBC79A0438D116435AFFFCAF01691888E009C16594D1B50914FDC4B1B353896DD8BEC9E4697F503A2D55FAA4CD335E4A02C47B277A1DD09E04C60C7B62DA65F4203B987B062306F6DA3B8903FA29CBC5227AC9ED16B70A33CD31F67DF90449D2A4BC809A8A84C72BF97D40846DD14C923E6AF56D0B50C49940E8952DABFA2ADF1B4218E4CF5E2D35E353CE37C87BACF8760DBEE1A49CFEFF1EFFA19A30BFE58A101A39C79D9C85C94D5532A52CA724E119EBED06A3775DDA2CDE42D34932F97ED1AB7A5944881986F0A7764726DBE6EA68A71CA4D51931F5F7C8494724599BD64A71970FED9E92D6DA5ACEEC2DEAFBABB28D65BE7B2AD720D05BCDC64D31985FD321AFD33132E77550E155F1DFAC0ABF9D6EDEE2C7D8AC17BB99C9F0B18089798D8DBE51A2E7C6B93DBF046C2055BD4E02A1749FD5E38DBB6721BC450C18C4B23105EEF44A5B7E79EC5230CFBF82EF9E4B239FDD52826C73327060A39BD9642D709921C112778D0F87E176DB4A4A7C1A7FF1F42C70B39620241C79

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/Thonburi-Bold cguidfix
/F2.1/Thonburi-Bold renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 41.125072 24.125071 rc
5.8217216 13.321722 m
6.876142 12.267307 6.876142 10.557764 5.8217216 9.5033493 c
4.7673068 8.4489288 3.0577641 8.4489288 2.0033493 9.5033493 c
0.94892901 10.557764 0.94892901 12.267307 2.0033493 13.321722 c
3.0577641 14.376142 4.7673068 14.376142 5.8217216 13.321722 c
f
1 J
1 j
0.60000002 i
0 0 0 sc
0.1 0 0 -0.1 -6.8874645 115.81254 cm
127.09187 1024.9081 m
137.63606 1035.4523 137.63606 1052.5477 127.09187 1063.0919 c
116.54771 1073.6361 99.452286 1073.6361 88.908134 1063.0919 c
78.363937 1052.5477 78.363937 1035.4523 88.908134 1024.9081 c
99.452286 1014.364 116.54771 1014.364 127.09187 1024.9081 c
S
/Cs2 SC
0 sc
0 i
0.1 0 0 -0.1 3.9125354 11.412536 cm
/F1.1[ 16 0 0 -16 0 0]sf
-5.184 5.776001 m
(!)s
/Cs1 SC
1 1 1 sc
CM
39.121723 13.321722 m
40.176144 12.267307 40.176144 10.557764 39.121723 9.5033493 c
38.067307 8.4489288 36.357765 8.4489288 35.303349 9.5033493 c
34.248928 10.557764 34.248928 12.267307 35.303349 13.321722 c
36.357765 14.376142 38.067307 14.376142 39.121723 13.321722 c
f
0.60000002 i
0 0 0 sc
0.1 0 0 -0.1 -6.8874645 115.81254 cm
460.09186 1024.9081 m
470.63608 1035.4523 470.63608 1052.5477 460.09186 1063.0919 c
449.5477 1073.6361 432.4523 1073.6361 421.90814 1063.0919 c
411.36392 1052.5477 411.36392 1035.4523 421.90814 1024.9081 c
432.4523 1014.364 449.5477 1014.364 460.09186 1024.9081 c
S
/Cs2 SC
0 sc
0 i
0.1 0 0 -0.1 37.212536 11.412536 cm
-5.48 5.776001 m
(")s
0.5 w
0.60000002 i
/Cs1 SC
0 0 0 sc
0.1 0 0 -0.1 -6.8874645 115.81254 cm
135.00002 1044 m
408.79999 1044 l
S
0 i
CM
34.392536 11.412536 m
33.992535 11.562535 l
33.992535 11.262535 l
h
34.392536 11.412536 m
f
0 J
0 j
0.1 0 0 -0.1 -6.8874645 115.81254 cm
412.79999 1044 m
408.79999 1042.5 l
408.79999 1045.5 l
h
412.79999 1044 m
S
1 J
1 j
0.60000002 i
116.877 1018.4944 m
169.55406 907.75134 368.45358 930.3844 427.29803 1014.9225 c
S
0 i
CM
36.06258 13.98639 m
35.967545 14.402884 l
35.717121 14.237698 l
h
36.06258 13.98639 m
f
0 J
0 j
0.1 0 0 -0.1 -6.8874645 115.81254 cm
429.50046 1018.2615 m
428.55011 1014.0965 l
426.04584 1015.7484 l
h
429.50046 1018.2615 m
S
1 J
1 j
0.60000002 i
115.04365 1070.0698 m
157.90575 1167.5554 362.64502 1136.8998 424.59921 1071.5831 c
S
0 i
CM
35.839394 8.9521341 m
35.460747 8.7543259 l
35.684177 8.5541286 l
h
35.839394 8.9521341 m
f
0 J
0 j
0.1 0 0 -0.1 -6.8874645 115.81254 cm
427.26855 1068.604 m
423.48212 1070.5822 l
425.71643 1072.5841 l
h
427.26855 1068.604 m
S
1 1 1 sc
CM
9.6230602 12.962536 m
28.823061 12.962536 l
28.823061 9.8625355 l
9.6230602 9.8625355 l
h
9.6230602 12.962536 m
f
/Cs2 SC
0 sc
0.1 0 0 -0.1 19.223061 11.412536 cm
/F2.1[ 15 0 0 -15 0 0]sf
-90.738281 5.9989777 m
(!"#$%&!'\('!\)*+"#$\),\)**\)")[ 9.146484 6.287109 8.296875 9.029297 3.521484 8.753906 9.146484 4.980469 4.546875 4.980469 9.146484 8.636719 6.650391 10.113281 6.287109 8.296875 9.029297 8.636719 9.128906 8.636719 6.650391 6.650391 8.636719 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
12.64481 23.024029 m
26.944809 23.024029 l
26.944809 19.92403 l
12.64481 19.92403 l
h
12.64481 23.024029 m
f
/Cs2 SC
0 sc
0.1 0 0 -0.1 19.794809 21.47403 cm
-66.319336 5.9989777 m
(!"#$%&!'\('!\)*+-./)[ 9.146484 6.287109 8.296875 9.029297 3.521484 8.753906 9.146484 4.980469 4.546875 4.980469 9.146484 8.636719 6.650391 10.113281 8.894531 10.904297 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
9.4409885 4.200923 m
30.140989 4.200923 l
30.140989 1.1009227 l
9.4409885 1.1009227 l
h
9.4409885 4.200923 m
f
/Cs2 SC
0 sc
0.1 0 0 -0.1 19.790989 2.6509228 cm
-98.047852 5.9989777 m
(!"#$%&!'\('!\)*0*1$\)&*-"234\))[ 9.146484 6.287109 8.296875 9.029297 3.521484 8.753906 9.146484 4.980469 4.546875 4.980469 9.146484 8.636719 6.650391 9.087891 6.650391 8.753906 9.029297 8.636719 8.753906 6.650391 8.894531 6.287109 9.087891 8.982422 3.521484 0.000000 ] xS
ep
end
%%Trailer
%%EOF
